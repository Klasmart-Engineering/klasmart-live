{"version":3,"file":"index.js","sources":["../node_modules/@protobufjs/aspromise/index.js","../node_modules/@protobufjs/base64/index.js","../node_modules/@protobufjs/eventemitter/index.js","../node_modules/@protobufjs/float/index.js","../node_modules/@protobufjs/inquire/index.js","../node_modules/@protobufjs/utf8/index.js","../node_modules/@protobufjs/pool/index.js","../node_modules/protobufjs/src/util/longbits.js","../node_modules/protobufjs/src/util/minimal.js","../node_modules/protobufjs/src/writer.js","../node_modules/protobufjs/src/writer_buffer.js","../node_modules/protobufjs/src/reader.js","../node_modules/protobufjs/src/reader_buffer.js","../node_modules/protobufjs/src/rpc/service.js","../node_modules/protobufjs/src/rpc.js","../node_modules/protobufjs/src/roots.js","../node_modules/protobufjs/src/index-minimal.js","../node_modules/protobufjs/minimal.js","index.js"],"sourcesContent":["\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(\"../util/minimal\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(\"@protobufjs/aspromise\");\n\n// converts to / from base64 encoded strings\nutil.base64 = require(\"@protobufjs/base64\");\n\n// base class of rpc.Service\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\n\n// float handling accross browsers\nutil.float = require(\"@protobufjs/float\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(\"@protobufjs/inquire\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(\"@protobufjs/utf8\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(\"@protobufjs/pool\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(\"./longbits\");\n\n// global object reference\nutil.global = typeof window !== \"undefined\" && window\n           || typeof global !== \"undefined\" && global\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n * @const\n */\nutil.isNode = Boolean(util.global.process && util.global.process.versions && util.global.process.versions.node);\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\n\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\n\n    CustomError.prototype.toString = function toString() {\n        return this.name + \": \" + this.message;\n    };\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n","\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(\"./writer\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n","\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n","\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(\"./reader\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n","\"use strict\";\nmodule.exports = Service;\n\nvar util = require(\"../util/minimal\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n","\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(\"./rpc/service\");\n","\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available accross modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n","\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(\"./writer\");\nprotobuf.BufferWriter = require(\"./writer_buffer\");\nprotobuf.Reader       = require(\"./reader\");\nprotobuf.BufferReader = require(\"./reader_buffer\");\n\n// Utility\nprotobuf.util         = require(\"./util/minimal\");\nprotobuf.rpc          = require(\"./rpc\");\nprotobuf.roots        = require(\"./roots\");\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n","// minimal library entry point.\n\n\"use strict\";\nmodule.exports = require(\"./src/index-minimal\");\n","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.Action = (function() {\n\n    /**\n     * Properties of an Action.\n     * @exports IAction\n     * @interface IAction\n     * @property {string|null} [id] Action id\n     * @property {ISetDevice|null} [setDevice] Action setDevice\n     * @property {IRemoveDevice|null} [removeDevice] Action removeDevice\n     * @property {ISetWebRTCStream|null} [setWebRtcStream] Action setWebRtcStream\n     * @property {ISetActivity|null} [setActivity] Action setActivity\n     * @property {ISetHost|null} [setHost] Action setHost\n     * @property {IAddTrophy|null} [addTrophy] Action addTrophy\n     * @property {ISetContent|null} [setContent] Action setContent\n     * @property {ISendChatMessage|null} [sendChatMessage] Action sendChatMessage\n     * @property {IUserJoin|null} [userJoin] Action userJoin\n     * @property {IUserLeave|null} [userLeave] Action userLeave\n     * @property {IEndClass|null} [endClass] Action endClass\n     * @property {IHeartbeat|null} [heartbeat] Action heartbeat\n     */\n\n    /**\n     * Constructs a new Action.\n     * @exports Action\n     * @classdesc Represents an Action.\n     * @implements IAction\n     * @constructor\n     * @param {IAction=} [properties] Properties to set\n     */\n    function Action(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Action id.\n     * @member {string} id\n     * @memberof Action\n     * @instance\n     */\n    Action.prototype.id = \"\";\n\n    /**\n     * Action setDevice.\n     * @member {ISetDevice|null|undefined} setDevice\n     * @memberof Action\n     * @instance\n     */\n    Action.prototype.setDevice = null;\n\n    /**\n     * Action removeDevice.\n     * @member {IRemoveDevice|null|undefined} removeDevice\n     * @memberof Action\n     * @instance\n     */\n    Action.prototype.removeDevice = null;\n\n    /**\n     * Action setWebRtcStream.\n     * @member {ISetWebRTCStream|null|undefined} setWebRtcStream\n     * @memberof Action\n     * @instance\n     */\n    Action.prototype.setWebRtcStream = null;\n\n    /**\n     * Action setActivity.\n     * @member {ISetActivity|null|undefined} setActivity\n     * @memberof Action\n     * @instance\n     */\n    Action.prototype.setActivity = null;\n\n    /**\n     * Action setHost.\n     * @member {ISetHost|null|undefined} setHost\n     * @memberof Action\n     * @instance\n     */\n    Action.prototype.setHost = null;\n\n    /**\n     * Action addTrophy.\n     * @member {IAddTrophy|null|undefined} addTrophy\n     * @memberof Action\n     * @instance\n     */\n    Action.prototype.addTrophy = null;\n\n    /**\n     * Action setContent.\n     * @member {ISetContent|null|undefined} setContent\n     * @memberof Action\n     * @instance\n     */\n    Action.prototype.setContent = null;\n\n    /**\n     * Action sendChatMessage.\n     * @member {ISendChatMessage|null|undefined} sendChatMessage\n     * @memberof Action\n     * @instance\n     */\n    Action.prototype.sendChatMessage = null;\n\n    /**\n     * Action userJoin.\n     * @member {IUserJoin|null|undefined} userJoin\n     * @memberof Action\n     * @instance\n     */\n    Action.prototype.userJoin = null;\n\n    /**\n     * Action userLeave.\n     * @member {IUserLeave|null|undefined} userLeave\n     * @memberof Action\n     * @instance\n     */\n    Action.prototype.userLeave = null;\n\n    /**\n     * Action endClass.\n     * @member {IEndClass|null|undefined} endClass\n     * @memberof Action\n     * @instance\n     */\n    Action.prototype.endClass = null;\n\n    /**\n     * Action heartbeat.\n     * @member {IHeartbeat|null|undefined} heartbeat\n     * @memberof Action\n     * @instance\n     */\n    Action.prototype.heartbeat = null;\n\n    // OneOf field names bound to virtual getters and setters\n    var $oneOfFields;\n\n    /**\n     * Action action.\n     * @member {\"setDevice\"|\"removeDevice\"|\"setWebRtcStream\"|\"setActivity\"|\"setHost\"|\"addTrophy\"|\"setContent\"|\"sendChatMessage\"|\"userJoin\"|\"userLeave\"|\"endClass\"|\"heartbeat\"|undefined} action\n     * @memberof Action\n     * @instance\n     */\n    Object.defineProperty(Action.prototype, \"action\", {\n        get: $util.oneOfGetter($oneOfFields = [\"setDevice\", \"removeDevice\", \"setWebRtcStream\", \"setActivity\", \"setHost\", \"addTrophy\", \"setContent\", \"sendChatMessage\", \"userJoin\", \"userLeave\", \"endClass\", \"heartbeat\"]),\n        set: $util.oneOfSetter($oneOfFields)\n    });\n\n    /**\n     * Creates a new Action instance using the specified properties.\n     * @function create\n     * @memberof Action\n     * @static\n     * @param {IAction=} [properties] Properties to set\n     * @returns {Action} Action instance\n     */\n    Action.create = function create(properties) {\n        return new Action(properties);\n    };\n\n    /**\n     * Encodes the specified Action message. Does not implicitly {@link Action.verify|verify} messages.\n     * @function encode\n     * @memberof Action\n     * @static\n     * @param {IAction} message Action message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Action.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.id != null && Object.hasOwnProperty.call(message, \"id\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);\n        if (message.heartbeat != null && Object.hasOwnProperty.call(message, \"heartbeat\"))\n            $root.Heartbeat.encode(message.heartbeat, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        if (message.setDevice != null && Object.hasOwnProperty.call(message, \"setDevice\"))\n            $root.SetDevice.encode(message.setDevice, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n        if (message.removeDevice != null && Object.hasOwnProperty.call(message, \"removeDevice\"))\n            $root.RemoveDevice.encode(message.removeDevice, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n        if (message.setWebRtcStream != null && Object.hasOwnProperty.call(message, \"setWebRtcStream\"))\n            $root.SetWebRTCStream.encode(message.setWebRtcStream, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n        if (message.setActivity != null && Object.hasOwnProperty.call(message, \"setActivity\"))\n            $root.SetActivity.encode(message.setActivity, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n        if (message.setHost != null && Object.hasOwnProperty.call(message, \"setHost\"))\n            $root.SetHost.encode(message.setHost, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n        if (message.addTrophy != null && Object.hasOwnProperty.call(message, \"addTrophy\"))\n            $root.AddTrophy.encode(message.addTrophy, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n        if (message.setContent != null && Object.hasOwnProperty.call(message, \"setContent\"))\n            $root.SetContent.encode(message.setContent, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\n        if (message.sendChatMessage != null && Object.hasOwnProperty.call(message, \"sendChatMessage\"))\n            $root.SendChatMessage.encode(message.sendChatMessage, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n        if (message.userJoin != null && Object.hasOwnProperty.call(message, \"userJoin\"))\n            $root.UserJoin.encode(message.userJoin, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n        if (message.userLeave != null && Object.hasOwnProperty.call(message, \"userLeave\"))\n            $root.UserLeave.encode(message.userLeave, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();\n        if (message.endClass != null && Object.hasOwnProperty.call(message, \"endClass\"))\n            $root.EndClass.encode(message.endClass, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified Action message, length delimited. Does not implicitly {@link Action.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Action\n     * @static\n     * @param {IAction} message Action message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Action.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes an Action message from the specified reader or buffer.\n     * @function decode\n     * @memberof Action\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Action} Action\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Action.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Action();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.id = reader.string();\n                break;\n            case 3:\n                message.setDevice = $root.SetDevice.decode(reader, reader.uint32());\n                break;\n            case 4:\n                message.removeDevice = $root.RemoveDevice.decode(reader, reader.uint32());\n                break;\n            case 5:\n                message.setWebRtcStream = $root.SetWebRTCStream.decode(reader, reader.uint32());\n                break;\n            case 6:\n                message.setActivity = $root.SetActivity.decode(reader, reader.uint32());\n                break;\n            case 7:\n                message.setHost = $root.SetHost.decode(reader, reader.uint32());\n                break;\n            case 8:\n                message.addTrophy = $root.AddTrophy.decode(reader, reader.uint32());\n                break;\n            case 9:\n                message.setContent = $root.SetContent.decode(reader, reader.uint32());\n                break;\n            case 10:\n                message.sendChatMessage = $root.SendChatMessage.decode(reader, reader.uint32());\n                break;\n            case 11:\n                message.userJoin = $root.UserJoin.decode(reader, reader.uint32());\n                break;\n            case 12:\n                message.userLeave = $root.UserLeave.decode(reader, reader.uint32());\n                break;\n            case 13:\n                message.endClass = $root.EndClass.decode(reader, reader.uint32());\n                break;\n            case 2:\n                message.heartbeat = $root.Heartbeat.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes an Action message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Action\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Action} Action\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Action.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies an Action message.\n     * @function verify\n     * @memberof Action\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    Action.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        var properties = {};\n        if (message.id != null && message.hasOwnProperty(\"id\"))\n            if (!$util.isString(message.id))\n                return \"id: string expected\";\n        if (message.setDevice != null && message.hasOwnProperty(\"setDevice\")) {\n            properties.action = 1;\n            {\n                var error = $root.SetDevice.verify(message.setDevice);\n                if (error)\n                    return \"setDevice.\" + error;\n            }\n        }\n        if (message.removeDevice != null && message.hasOwnProperty(\"removeDevice\")) {\n            if (properties.action === 1)\n                return \"action: multiple values\";\n            properties.action = 1;\n            {\n                var error = $root.RemoveDevice.verify(message.removeDevice);\n                if (error)\n                    return \"removeDevice.\" + error;\n            }\n        }\n        if (message.setWebRtcStream != null && message.hasOwnProperty(\"setWebRtcStream\")) {\n            if (properties.action === 1)\n                return \"action: multiple values\";\n            properties.action = 1;\n            {\n                var error = $root.SetWebRTCStream.verify(message.setWebRtcStream);\n                if (error)\n                    return \"setWebRtcStream.\" + error;\n            }\n        }\n        if (message.setActivity != null && message.hasOwnProperty(\"setActivity\")) {\n            if (properties.action === 1)\n                return \"action: multiple values\";\n            properties.action = 1;\n            {\n                var error = $root.SetActivity.verify(message.setActivity);\n                if (error)\n                    return \"setActivity.\" + error;\n            }\n        }\n        if (message.setHost != null && message.hasOwnProperty(\"setHost\")) {\n            if (properties.action === 1)\n                return \"action: multiple values\";\n            properties.action = 1;\n            {\n                var error = $root.SetHost.verify(message.setHost);\n                if (error)\n                    return \"setHost.\" + error;\n            }\n        }\n        if (message.addTrophy != null && message.hasOwnProperty(\"addTrophy\")) {\n            if (properties.action === 1)\n                return \"action: multiple values\";\n            properties.action = 1;\n            {\n                var error = $root.AddTrophy.verify(message.addTrophy);\n                if (error)\n                    return \"addTrophy.\" + error;\n            }\n        }\n        if (message.setContent != null && message.hasOwnProperty(\"setContent\")) {\n            if (properties.action === 1)\n                return \"action: multiple values\";\n            properties.action = 1;\n            {\n                var error = $root.SetContent.verify(message.setContent);\n                if (error)\n                    return \"setContent.\" + error;\n            }\n        }\n        if (message.sendChatMessage != null && message.hasOwnProperty(\"sendChatMessage\")) {\n            if (properties.action === 1)\n                return \"action: multiple values\";\n            properties.action = 1;\n            {\n                var error = $root.SendChatMessage.verify(message.sendChatMessage);\n                if (error)\n                    return \"sendChatMessage.\" + error;\n            }\n        }\n        if (message.userJoin != null && message.hasOwnProperty(\"userJoin\")) {\n            if (properties.action === 1)\n                return \"action: multiple values\";\n            properties.action = 1;\n            {\n                var error = $root.UserJoin.verify(message.userJoin);\n                if (error)\n                    return \"userJoin.\" + error;\n            }\n        }\n        if (message.userLeave != null && message.hasOwnProperty(\"userLeave\")) {\n            if (properties.action === 1)\n                return \"action: multiple values\";\n            properties.action = 1;\n            {\n                var error = $root.UserLeave.verify(message.userLeave);\n                if (error)\n                    return \"userLeave.\" + error;\n            }\n        }\n        if (message.endClass != null && message.hasOwnProperty(\"endClass\")) {\n            if (properties.action === 1)\n                return \"action: multiple values\";\n            properties.action = 1;\n            {\n                var error = $root.EndClass.verify(message.endClass);\n                if (error)\n                    return \"endClass.\" + error;\n            }\n        }\n        if (message.heartbeat != null && message.hasOwnProperty(\"heartbeat\")) {\n            if (properties.action === 1)\n                return \"action: multiple values\";\n            properties.action = 1;\n            {\n                var error = $root.Heartbeat.verify(message.heartbeat);\n                if (error)\n                    return \"heartbeat.\" + error;\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Creates an Action message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Action\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {Action} Action\n     */\n    Action.fromObject = function fromObject(object) {\n        if (object instanceof $root.Action)\n            return object;\n        var message = new $root.Action();\n        if (object.id != null)\n            message.id = String(object.id);\n        if (object.setDevice != null) {\n            if (typeof object.setDevice !== \"object\")\n                throw TypeError(\".Action.setDevice: object expected\");\n            message.setDevice = $root.SetDevice.fromObject(object.setDevice);\n        }\n        if (object.removeDevice != null) {\n            if (typeof object.removeDevice !== \"object\")\n                throw TypeError(\".Action.removeDevice: object expected\");\n            message.removeDevice = $root.RemoveDevice.fromObject(object.removeDevice);\n        }\n        if (object.setWebRtcStream != null) {\n            if (typeof object.setWebRtcStream !== \"object\")\n                throw TypeError(\".Action.setWebRtcStream: object expected\");\n            message.setWebRtcStream = $root.SetWebRTCStream.fromObject(object.setWebRtcStream);\n        }\n        if (object.setActivity != null) {\n            if (typeof object.setActivity !== \"object\")\n                throw TypeError(\".Action.setActivity: object expected\");\n            message.setActivity = $root.SetActivity.fromObject(object.setActivity);\n        }\n        if (object.setHost != null) {\n            if (typeof object.setHost !== \"object\")\n                throw TypeError(\".Action.setHost: object expected\");\n            message.setHost = $root.SetHost.fromObject(object.setHost);\n        }\n        if (object.addTrophy != null) {\n            if (typeof object.addTrophy !== \"object\")\n                throw TypeError(\".Action.addTrophy: object expected\");\n            message.addTrophy = $root.AddTrophy.fromObject(object.addTrophy);\n        }\n        if (object.setContent != null) {\n            if (typeof object.setContent !== \"object\")\n                throw TypeError(\".Action.setContent: object expected\");\n            message.setContent = $root.SetContent.fromObject(object.setContent);\n        }\n        if (object.sendChatMessage != null) {\n            if (typeof object.sendChatMessage !== \"object\")\n                throw TypeError(\".Action.sendChatMessage: object expected\");\n            message.sendChatMessage = $root.SendChatMessage.fromObject(object.sendChatMessage);\n        }\n        if (object.userJoin != null) {\n            if (typeof object.userJoin !== \"object\")\n                throw TypeError(\".Action.userJoin: object expected\");\n            message.userJoin = $root.UserJoin.fromObject(object.userJoin);\n        }\n        if (object.userLeave != null) {\n            if (typeof object.userLeave !== \"object\")\n                throw TypeError(\".Action.userLeave: object expected\");\n            message.userLeave = $root.UserLeave.fromObject(object.userLeave);\n        }\n        if (object.endClass != null) {\n            if (typeof object.endClass !== \"object\")\n                throw TypeError(\".Action.endClass: object expected\");\n            message.endClass = $root.EndClass.fromObject(object.endClass);\n        }\n        if (object.heartbeat != null) {\n            if (typeof object.heartbeat !== \"object\")\n                throw TypeError(\".Action.heartbeat: object expected\");\n            message.heartbeat = $root.Heartbeat.fromObject(object.heartbeat);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from an Action message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Action\n     * @static\n     * @param {Action} message Action\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Action.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults)\n            object.id = \"\";\n        if (message.id != null && message.hasOwnProperty(\"id\"))\n            object.id = message.id;\n        if (message.heartbeat != null && message.hasOwnProperty(\"heartbeat\")) {\n            object.heartbeat = $root.Heartbeat.toObject(message.heartbeat, options);\n            if (options.oneofs)\n                object.action = \"heartbeat\";\n        }\n        if (message.setDevice != null && message.hasOwnProperty(\"setDevice\")) {\n            object.setDevice = $root.SetDevice.toObject(message.setDevice, options);\n            if (options.oneofs)\n                object.action = \"setDevice\";\n        }\n        if (message.removeDevice != null && message.hasOwnProperty(\"removeDevice\")) {\n            object.removeDevice = $root.RemoveDevice.toObject(message.removeDevice, options);\n            if (options.oneofs)\n                object.action = \"removeDevice\";\n        }\n        if (message.setWebRtcStream != null && message.hasOwnProperty(\"setWebRtcStream\")) {\n            object.setWebRtcStream = $root.SetWebRTCStream.toObject(message.setWebRtcStream, options);\n            if (options.oneofs)\n                object.action = \"setWebRtcStream\";\n        }\n        if (message.setActivity != null && message.hasOwnProperty(\"setActivity\")) {\n            object.setActivity = $root.SetActivity.toObject(message.setActivity, options);\n            if (options.oneofs)\n                object.action = \"setActivity\";\n        }\n        if (message.setHost != null && message.hasOwnProperty(\"setHost\")) {\n            object.setHost = $root.SetHost.toObject(message.setHost, options);\n            if (options.oneofs)\n                object.action = \"setHost\";\n        }\n        if (message.addTrophy != null && message.hasOwnProperty(\"addTrophy\")) {\n            object.addTrophy = $root.AddTrophy.toObject(message.addTrophy, options);\n            if (options.oneofs)\n                object.action = \"addTrophy\";\n        }\n        if (message.setContent != null && message.hasOwnProperty(\"setContent\")) {\n            object.setContent = $root.SetContent.toObject(message.setContent, options);\n            if (options.oneofs)\n                object.action = \"setContent\";\n        }\n        if (message.sendChatMessage != null && message.hasOwnProperty(\"sendChatMessage\")) {\n            object.sendChatMessage = $root.SendChatMessage.toObject(message.sendChatMessage, options);\n            if (options.oneofs)\n                object.action = \"sendChatMessage\";\n        }\n        if (message.userJoin != null && message.hasOwnProperty(\"userJoin\")) {\n            object.userJoin = $root.UserJoin.toObject(message.userJoin, options);\n            if (options.oneofs)\n                object.action = \"userJoin\";\n        }\n        if (message.userLeave != null && message.hasOwnProperty(\"userLeave\")) {\n            object.userLeave = $root.UserLeave.toObject(message.userLeave, options);\n            if (options.oneofs)\n                object.action = \"userLeave\";\n        }\n        if (message.endClass != null && message.hasOwnProperty(\"endClass\")) {\n            object.endClass = $root.EndClass.toObject(message.endClass, options);\n            if (options.oneofs)\n                object.action = \"endClass\";\n        }\n        return object;\n    };\n\n    /**\n     * Converts this Action to JSON.\n     * @function toJSON\n     * @memberof Action\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Action.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Action;\n})();\n\n$root.ActionAcknowledgement = (function() {\n\n    /**\n     * Properties of an ActionAcknowledgement.\n     * @exports IActionAcknowledgement\n     * @interface IActionAcknowledgement\n     * @property {string|null} [id] ActionAcknowledgement id\n     * @property {string|null} [error] ActionAcknowledgement error\n     * @property {number|null} [code] ActionAcknowledgement code\n     */\n\n    /**\n     * Constructs a new ActionAcknowledgement.\n     * @exports ActionAcknowledgement\n     * @classdesc Represents an ActionAcknowledgement.\n     * @implements IActionAcknowledgement\n     * @constructor\n     * @param {IActionAcknowledgement=} [properties] Properties to set\n     */\n    function ActionAcknowledgement(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ActionAcknowledgement id.\n     * @member {string} id\n     * @memberof ActionAcknowledgement\n     * @instance\n     */\n    ActionAcknowledgement.prototype.id = \"\";\n\n    /**\n     * ActionAcknowledgement error.\n     * @member {string} error\n     * @memberof ActionAcknowledgement\n     * @instance\n     */\n    ActionAcknowledgement.prototype.error = \"\";\n\n    /**\n     * ActionAcknowledgement code.\n     * @member {number} code\n     * @memberof ActionAcknowledgement\n     * @instance\n     */\n    ActionAcknowledgement.prototype.code = 0;\n\n    /**\n     * Creates a new ActionAcknowledgement instance using the specified properties.\n     * @function create\n     * @memberof ActionAcknowledgement\n     * @static\n     * @param {IActionAcknowledgement=} [properties] Properties to set\n     * @returns {ActionAcknowledgement} ActionAcknowledgement instance\n     */\n    ActionAcknowledgement.create = function create(properties) {\n        return new ActionAcknowledgement(properties);\n    };\n\n    /**\n     * Encodes the specified ActionAcknowledgement message. Does not implicitly {@link ActionAcknowledgement.verify|verify} messages.\n     * @function encode\n     * @memberof ActionAcknowledgement\n     * @static\n     * @param {IActionAcknowledgement} message ActionAcknowledgement message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ActionAcknowledgement.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.id != null && Object.hasOwnProperty.call(message, \"id\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);\n        if (message.error != null && Object.hasOwnProperty.call(message, \"error\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.error);\n        if (message.code != null && Object.hasOwnProperty.call(message, \"code\"))\n            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.code);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ActionAcknowledgement message, length delimited. Does not implicitly {@link ActionAcknowledgement.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ActionAcknowledgement\n     * @static\n     * @param {IActionAcknowledgement} message ActionAcknowledgement message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ActionAcknowledgement.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes an ActionAcknowledgement message from the specified reader or buffer.\n     * @function decode\n     * @memberof ActionAcknowledgement\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ActionAcknowledgement} ActionAcknowledgement\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ActionAcknowledgement.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActionAcknowledgement();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.id = reader.string();\n                break;\n            case 2:\n                message.error = reader.string();\n                break;\n            case 3:\n                message.code = reader.uint32();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes an ActionAcknowledgement message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ActionAcknowledgement\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ActionAcknowledgement} ActionAcknowledgement\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ActionAcknowledgement.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies an ActionAcknowledgement message.\n     * @function verify\n     * @memberof ActionAcknowledgement\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ActionAcknowledgement.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.id != null && message.hasOwnProperty(\"id\"))\n            if (!$util.isString(message.id))\n                return \"id: string expected\";\n        if (message.error != null && message.hasOwnProperty(\"error\"))\n            if (!$util.isString(message.error))\n                return \"error: string expected\";\n        if (message.code != null && message.hasOwnProperty(\"code\"))\n            if (!$util.isInteger(message.code))\n                return \"code: integer expected\";\n        return null;\n    };\n\n    /**\n     * Creates an ActionAcknowledgement message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ActionAcknowledgement\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ActionAcknowledgement} ActionAcknowledgement\n     */\n    ActionAcknowledgement.fromObject = function fromObject(object) {\n        if (object instanceof $root.ActionAcknowledgement)\n            return object;\n        var message = new $root.ActionAcknowledgement();\n        if (object.id != null)\n            message.id = String(object.id);\n        if (object.error != null)\n            message.error = String(object.error);\n        if (object.code != null)\n            message.code = object.code >>> 0;\n        return message;\n    };\n\n    /**\n     * Creates a plain object from an ActionAcknowledgement message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ActionAcknowledgement\n     * @static\n     * @param {ActionAcknowledgement} message ActionAcknowledgement\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ActionAcknowledgement.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.id = \"\";\n            object.error = \"\";\n            object.code = 0;\n        }\n        if (message.id != null && message.hasOwnProperty(\"id\"))\n            object.id = message.id;\n        if (message.error != null && message.hasOwnProperty(\"error\"))\n            object.error = message.error;\n        if (message.code != null && message.hasOwnProperty(\"code\"))\n            object.code = message.code;\n        return object;\n    };\n\n    /**\n     * Converts this ActionAcknowledgement to JSON.\n     * @function toJSON\n     * @memberof ActionAcknowledgement\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ActionAcknowledgement.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ActionAcknowledgement;\n})();\n\n$root.UserJoin = (function() {\n\n    /**\n     * Properties of a UserJoin.\n     * @exports IUserJoin\n     * @interface IUserJoin\n     */\n\n    /**\n     * Constructs a new UserJoin.\n     * @exports UserJoin\n     * @classdesc Represents a UserJoin.\n     * @implements IUserJoin\n     * @constructor\n     * @param {IUserJoin=} [properties] Properties to set\n     */\n    function UserJoin(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Creates a new UserJoin instance using the specified properties.\n     * @function create\n     * @memberof UserJoin\n     * @static\n     * @param {IUserJoin=} [properties] Properties to set\n     * @returns {UserJoin} UserJoin instance\n     */\n    UserJoin.create = function create(properties) {\n        return new UserJoin(properties);\n    };\n\n    /**\n     * Encodes the specified UserJoin message. Does not implicitly {@link UserJoin.verify|verify} messages.\n     * @function encode\n     * @memberof UserJoin\n     * @static\n     * @param {IUserJoin} message UserJoin message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    UserJoin.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified UserJoin message, length delimited. Does not implicitly {@link UserJoin.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof UserJoin\n     * @static\n     * @param {IUserJoin} message UserJoin message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    UserJoin.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a UserJoin message from the specified reader or buffer.\n     * @function decode\n     * @memberof UserJoin\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {UserJoin} UserJoin\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    UserJoin.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.UserJoin();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a UserJoin message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof UserJoin\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {UserJoin} UserJoin\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    UserJoin.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a UserJoin message.\n     * @function verify\n     * @memberof UserJoin\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    UserJoin.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        return null;\n    };\n\n    /**\n     * Creates a UserJoin message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof UserJoin\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {UserJoin} UserJoin\n     */\n    UserJoin.fromObject = function fromObject(object) {\n        if (object instanceof $root.UserJoin)\n            return object;\n        return new $root.UserJoin();\n    };\n\n    /**\n     * Creates a plain object from a UserJoin message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof UserJoin\n     * @static\n     * @param {UserJoin} message UserJoin\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    UserJoin.toObject = function toObject() {\n        return {};\n    };\n\n    /**\n     * Converts this UserJoin to JSON.\n     * @function toJSON\n     * @memberof UserJoin\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    UserJoin.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return UserJoin;\n})();\n\n$root.UserLeave = (function() {\n\n    /**\n     * Properties of a UserLeave.\n     * @exports IUserLeave\n     * @interface IUserLeave\n     */\n\n    /**\n     * Constructs a new UserLeave.\n     * @exports UserLeave\n     * @classdesc Represents a UserLeave.\n     * @implements IUserLeave\n     * @constructor\n     * @param {IUserLeave=} [properties] Properties to set\n     */\n    function UserLeave(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Creates a new UserLeave instance using the specified properties.\n     * @function create\n     * @memberof UserLeave\n     * @static\n     * @param {IUserLeave=} [properties] Properties to set\n     * @returns {UserLeave} UserLeave instance\n     */\n    UserLeave.create = function create(properties) {\n        return new UserLeave(properties);\n    };\n\n    /**\n     * Encodes the specified UserLeave message. Does not implicitly {@link UserLeave.verify|verify} messages.\n     * @function encode\n     * @memberof UserLeave\n     * @static\n     * @param {IUserLeave} message UserLeave message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    UserLeave.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified UserLeave message, length delimited. Does not implicitly {@link UserLeave.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof UserLeave\n     * @static\n     * @param {IUserLeave} message UserLeave message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    UserLeave.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a UserLeave message from the specified reader or buffer.\n     * @function decode\n     * @memberof UserLeave\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {UserLeave} UserLeave\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    UserLeave.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.UserLeave();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a UserLeave message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof UserLeave\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {UserLeave} UserLeave\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    UserLeave.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a UserLeave message.\n     * @function verify\n     * @memberof UserLeave\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    UserLeave.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        return null;\n    };\n\n    /**\n     * Creates a UserLeave message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof UserLeave\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {UserLeave} UserLeave\n     */\n    UserLeave.fromObject = function fromObject(object) {\n        if (object instanceof $root.UserLeave)\n            return object;\n        return new $root.UserLeave();\n    };\n\n    /**\n     * Creates a plain object from a UserLeave message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof UserLeave\n     * @static\n     * @param {UserLeave} message UserLeave\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    UserLeave.toObject = function toObject() {\n        return {};\n    };\n\n    /**\n     * Converts this UserLeave to JSON.\n     * @function toJSON\n     * @memberof UserLeave\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    UserLeave.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return UserLeave;\n})();\n\n$root.EndClass = (function() {\n\n    /**\n     * Properties of an EndClass.\n     * @exports IEndClass\n     * @interface IEndClass\n     */\n\n    /**\n     * Constructs a new EndClass.\n     * @exports EndClass\n     * @classdesc Represents an EndClass.\n     * @implements IEndClass\n     * @constructor\n     * @param {IEndClass=} [properties] Properties to set\n     */\n    function EndClass(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Creates a new EndClass instance using the specified properties.\n     * @function create\n     * @memberof EndClass\n     * @static\n     * @param {IEndClass=} [properties] Properties to set\n     * @returns {EndClass} EndClass instance\n     */\n    EndClass.create = function create(properties) {\n        return new EndClass(properties);\n    };\n\n    /**\n     * Encodes the specified EndClass message. Does not implicitly {@link EndClass.verify|verify} messages.\n     * @function encode\n     * @memberof EndClass\n     * @static\n     * @param {IEndClass} message EndClass message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EndClass.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified EndClass message, length delimited. Does not implicitly {@link EndClass.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof EndClass\n     * @static\n     * @param {IEndClass} message EndClass message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EndClass.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes an EndClass message from the specified reader or buffer.\n     * @function decode\n     * @memberof EndClass\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {EndClass} EndClass\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EndClass.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EndClass();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes an EndClass message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof EndClass\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {EndClass} EndClass\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EndClass.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies an EndClass message.\n     * @function verify\n     * @memberof EndClass\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    EndClass.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        return null;\n    };\n\n    /**\n     * Creates an EndClass message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof EndClass\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {EndClass} EndClass\n     */\n    EndClass.fromObject = function fromObject(object) {\n        if (object instanceof $root.EndClass)\n            return object;\n        return new $root.EndClass();\n    };\n\n    /**\n     * Creates a plain object from an EndClass message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof EndClass\n     * @static\n     * @param {EndClass} message EndClass\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    EndClass.toObject = function toObject() {\n        return {};\n    };\n\n    /**\n     * Converts this EndClass to JSON.\n     * @function toJSON\n     * @memberof EndClass\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    EndClass.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return EndClass;\n})();\n\n$root.Heartbeat = (function() {\n\n    /**\n     * Properties of a Heartbeat.\n     * @exports IHeartbeat\n     * @interface IHeartbeat\n     */\n\n    /**\n     * Constructs a new Heartbeat.\n     * @exports Heartbeat\n     * @classdesc Represents a Heartbeat.\n     * @implements IHeartbeat\n     * @constructor\n     * @param {IHeartbeat=} [properties] Properties to set\n     */\n    function Heartbeat(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Creates a new Heartbeat instance using the specified properties.\n     * @function create\n     * @memberof Heartbeat\n     * @static\n     * @param {IHeartbeat=} [properties] Properties to set\n     * @returns {Heartbeat} Heartbeat instance\n     */\n    Heartbeat.create = function create(properties) {\n        return new Heartbeat(properties);\n    };\n\n    /**\n     * Encodes the specified Heartbeat message. Does not implicitly {@link Heartbeat.verify|verify} messages.\n     * @function encode\n     * @memberof Heartbeat\n     * @static\n     * @param {IHeartbeat} message Heartbeat message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Heartbeat.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified Heartbeat message, length delimited. Does not implicitly {@link Heartbeat.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Heartbeat\n     * @static\n     * @param {IHeartbeat} message Heartbeat message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Heartbeat.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a Heartbeat message from the specified reader or buffer.\n     * @function decode\n     * @memberof Heartbeat\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Heartbeat} Heartbeat\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Heartbeat.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Heartbeat();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a Heartbeat message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Heartbeat\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Heartbeat} Heartbeat\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Heartbeat.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a Heartbeat message.\n     * @function verify\n     * @memberof Heartbeat\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    Heartbeat.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        return null;\n    };\n\n    /**\n     * Creates a Heartbeat message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Heartbeat\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {Heartbeat} Heartbeat\n     */\n    Heartbeat.fromObject = function fromObject(object) {\n        if (object instanceof $root.Heartbeat)\n            return object;\n        return new $root.Heartbeat();\n    };\n\n    /**\n     * Creates a plain object from a Heartbeat message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Heartbeat\n     * @static\n     * @param {Heartbeat} message Heartbeat\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Heartbeat.toObject = function toObject() {\n        return {};\n    };\n\n    /**\n     * Converts this Heartbeat to JSON.\n     * @function toJSON\n     * @memberof Heartbeat\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Heartbeat.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Heartbeat;\n})();\n\n$root.SetDevice = (function() {\n\n    /**\n     * Properties of a SetDevice.\n     * @exports ISetDevice\n     * @interface ISetDevice\n     * @property {string|null} [deviceId] SetDevice deviceId\n     * @property {IDevice|null} [device] SetDevice device\n     */\n\n    /**\n     * Constructs a new SetDevice.\n     * @exports SetDevice\n     * @classdesc Represents a SetDevice.\n     * @implements ISetDevice\n     * @constructor\n     * @param {ISetDevice=} [properties] Properties to set\n     */\n    function SetDevice(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * SetDevice deviceId.\n     * @member {string} deviceId\n     * @memberof SetDevice\n     * @instance\n     */\n    SetDevice.prototype.deviceId = \"\";\n\n    /**\n     * SetDevice device.\n     * @member {IDevice|null|undefined} device\n     * @memberof SetDevice\n     * @instance\n     */\n    SetDevice.prototype.device = null;\n\n    /**\n     * Creates a new SetDevice instance using the specified properties.\n     * @function create\n     * @memberof SetDevice\n     * @static\n     * @param {ISetDevice=} [properties] Properties to set\n     * @returns {SetDevice} SetDevice instance\n     */\n    SetDevice.create = function create(properties) {\n        return new SetDevice(properties);\n    };\n\n    /**\n     * Encodes the specified SetDevice message. Does not implicitly {@link SetDevice.verify|verify} messages.\n     * @function encode\n     * @memberof SetDevice\n     * @static\n     * @param {ISetDevice} message SetDevice message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    SetDevice.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.deviceId != null && Object.hasOwnProperty.call(message, \"deviceId\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.deviceId);\n        if (message.device != null && Object.hasOwnProperty.call(message, \"device\"))\n            $root.Device.encode(message.device, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified SetDevice message, length delimited. Does not implicitly {@link SetDevice.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof SetDevice\n     * @static\n     * @param {ISetDevice} message SetDevice message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    SetDevice.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a SetDevice message from the specified reader or buffer.\n     * @function decode\n     * @memberof SetDevice\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {SetDevice} SetDevice\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    SetDevice.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SetDevice();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.deviceId = reader.string();\n                break;\n            case 2:\n                message.device = $root.Device.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a SetDevice message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof SetDevice\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {SetDevice} SetDevice\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    SetDevice.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a SetDevice message.\n     * @function verify\n     * @memberof SetDevice\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    SetDevice.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.deviceId != null && message.hasOwnProperty(\"deviceId\"))\n            if (!$util.isString(message.deviceId))\n                return \"deviceId: string expected\";\n        if (message.device != null && message.hasOwnProperty(\"device\")) {\n            var error = $root.Device.verify(message.device);\n            if (error)\n                return \"device.\" + error;\n        }\n        return null;\n    };\n\n    /**\n     * Creates a SetDevice message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof SetDevice\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {SetDevice} SetDevice\n     */\n    SetDevice.fromObject = function fromObject(object) {\n        if (object instanceof $root.SetDevice)\n            return object;\n        var message = new $root.SetDevice();\n        if (object.deviceId != null)\n            message.deviceId = String(object.deviceId);\n        if (object.device != null) {\n            if (typeof object.device !== \"object\")\n                throw TypeError(\".SetDevice.device: object expected\");\n            message.device = $root.Device.fromObject(object.device);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a SetDevice message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof SetDevice\n     * @static\n     * @param {SetDevice} message SetDevice\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    SetDevice.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.deviceId = \"\";\n            object.device = null;\n        }\n        if (message.deviceId != null && message.hasOwnProperty(\"deviceId\"))\n            object.deviceId = message.deviceId;\n        if (message.device != null && message.hasOwnProperty(\"device\"))\n            object.device = $root.Device.toObject(message.device, options);\n        return object;\n    };\n\n    /**\n     * Converts this SetDevice to JSON.\n     * @function toJSON\n     * @memberof SetDevice\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    SetDevice.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return SetDevice;\n})();\n\n$root.RemoveDevice = (function() {\n\n    /**\n     * Properties of a RemoveDevice.\n     * @exports IRemoveDevice\n     * @interface IRemoveDevice\n     * @property {string|null} [id] RemoveDevice id\n     */\n\n    /**\n     * Constructs a new RemoveDevice.\n     * @exports RemoveDevice\n     * @classdesc Represents a RemoveDevice.\n     * @implements IRemoveDevice\n     * @constructor\n     * @param {IRemoveDevice=} [properties] Properties to set\n     */\n    function RemoveDevice(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * RemoveDevice id.\n     * @member {string} id\n     * @memberof RemoveDevice\n     * @instance\n     */\n    RemoveDevice.prototype.id = \"\";\n\n    /**\n     * Creates a new RemoveDevice instance using the specified properties.\n     * @function create\n     * @memberof RemoveDevice\n     * @static\n     * @param {IRemoveDevice=} [properties] Properties to set\n     * @returns {RemoveDevice} RemoveDevice instance\n     */\n    RemoveDevice.create = function create(properties) {\n        return new RemoveDevice(properties);\n    };\n\n    /**\n     * Encodes the specified RemoveDevice message. Does not implicitly {@link RemoveDevice.verify|verify} messages.\n     * @function encode\n     * @memberof RemoveDevice\n     * @static\n     * @param {IRemoveDevice} message RemoveDevice message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    RemoveDevice.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.id != null && Object.hasOwnProperty.call(message, \"id\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified RemoveDevice message, length delimited. Does not implicitly {@link RemoveDevice.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof RemoveDevice\n     * @static\n     * @param {IRemoveDevice} message RemoveDevice message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    RemoveDevice.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a RemoveDevice message from the specified reader or buffer.\n     * @function decode\n     * @memberof RemoveDevice\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {RemoveDevice} RemoveDevice\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    RemoveDevice.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RemoveDevice();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.id = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a RemoveDevice message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof RemoveDevice\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {RemoveDevice} RemoveDevice\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    RemoveDevice.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a RemoveDevice message.\n     * @function verify\n     * @memberof RemoveDevice\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    RemoveDevice.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.id != null && message.hasOwnProperty(\"id\"))\n            if (!$util.isString(message.id))\n                return \"id: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a RemoveDevice message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof RemoveDevice\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {RemoveDevice} RemoveDevice\n     */\n    RemoveDevice.fromObject = function fromObject(object) {\n        if (object instanceof $root.RemoveDevice)\n            return object;\n        var message = new $root.RemoveDevice();\n        if (object.id != null)\n            message.id = String(object.id);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a RemoveDevice message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof RemoveDevice\n     * @static\n     * @param {RemoveDevice} message RemoveDevice\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    RemoveDevice.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults)\n            object.id = \"\";\n        if (message.id != null && message.hasOwnProperty(\"id\"))\n            object.id = message.id;\n        return object;\n    };\n\n    /**\n     * Converts this RemoveDevice to JSON.\n     * @function toJSON\n     * @memberof RemoveDevice\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    RemoveDevice.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return RemoveDevice;\n})();\n\n$root.SetWebRTCStream = (function() {\n\n    /**\n     * Properties of a SetWebRTCStream.\n     * @exports ISetWebRTCStream\n     * @interface ISetWebRTCStream\n     * @property {string|null} [deviceId] SetWebRTCStream deviceId\n     * @property {Array.<IWebRTCStream>|null} [streams] SetWebRTCStream streams\n     */\n\n    /**\n     * Constructs a new SetWebRTCStream.\n     * @exports SetWebRTCStream\n     * @classdesc Represents a SetWebRTCStream.\n     * @implements ISetWebRTCStream\n     * @constructor\n     * @param {ISetWebRTCStream=} [properties] Properties to set\n     */\n    function SetWebRTCStream(properties) {\n        this.streams = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * SetWebRTCStream deviceId.\n     * @member {string} deviceId\n     * @memberof SetWebRTCStream\n     * @instance\n     */\n    SetWebRTCStream.prototype.deviceId = \"\";\n\n    /**\n     * SetWebRTCStream streams.\n     * @member {Array.<IWebRTCStream>} streams\n     * @memberof SetWebRTCStream\n     * @instance\n     */\n    SetWebRTCStream.prototype.streams = $util.emptyArray;\n\n    /**\n     * Creates a new SetWebRTCStream instance using the specified properties.\n     * @function create\n     * @memberof SetWebRTCStream\n     * @static\n     * @param {ISetWebRTCStream=} [properties] Properties to set\n     * @returns {SetWebRTCStream} SetWebRTCStream instance\n     */\n    SetWebRTCStream.create = function create(properties) {\n        return new SetWebRTCStream(properties);\n    };\n\n    /**\n     * Encodes the specified SetWebRTCStream message. Does not implicitly {@link SetWebRTCStream.verify|verify} messages.\n     * @function encode\n     * @memberof SetWebRTCStream\n     * @static\n     * @param {ISetWebRTCStream} message SetWebRTCStream message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    SetWebRTCStream.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.deviceId != null && Object.hasOwnProperty.call(message, \"deviceId\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.deviceId);\n        if (message.streams != null && message.streams.length)\n            for (var i = 0; i < message.streams.length; ++i)\n                $root.WebRTCStream.encode(message.streams[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified SetWebRTCStream message, length delimited. Does not implicitly {@link SetWebRTCStream.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof SetWebRTCStream\n     * @static\n     * @param {ISetWebRTCStream} message SetWebRTCStream message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    SetWebRTCStream.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a SetWebRTCStream message from the specified reader or buffer.\n     * @function decode\n     * @memberof SetWebRTCStream\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {SetWebRTCStream} SetWebRTCStream\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    SetWebRTCStream.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SetWebRTCStream();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.deviceId = reader.string();\n                break;\n            case 2:\n                if (!(message.streams && message.streams.length))\n                    message.streams = [];\n                message.streams.push($root.WebRTCStream.decode(reader, reader.uint32()));\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a SetWebRTCStream message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof SetWebRTCStream\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {SetWebRTCStream} SetWebRTCStream\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    SetWebRTCStream.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a SetWebRTCStream message.\n     * @function verify\n     * @memberof SetWebRTCStream\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    SetWebRTCStream.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.deviceId != null && message.hasOwnProperty(\"deviceId\"))\n            if (!$util.isString(message.deviceId))\n                return \"deviceId: string expected\";\n        if (message.streams != null && message.hasOwnProperty(\"streams\")) {\n            if (!Array.isArray(message.streams))\n                return \"streams: array expected\";\n            for (var i = 0; i < message.streams.length; ++i) {\n                var error = $root.WebRTCStream.verify(message.streams[i]);\n                if (error)\n                    return \"streams.\" + error;\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Creates a SetWebRTCStream message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof SetWebRTCStream\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {SetWebRTCStream} SetWebRTCStream\n     */\n    SetWebRTCStream.fromObject = function fromObject(object) {\n        if (object instanceof $root.SetWebRTCStream)\n            return object;\n        var message = new $root.SetWebRTCStream();\n        if (object.deviceId != null)\n            message.deviceId = String(object.deviceId);\n        if (object.streams) {\n            if (!Array.isArray(object.streams))\n                throw TypeError(\".SetWebRTCStream.streams: array expected\");\n            message.streams = [];\n            for (var i = 0; i < object.streams.length; ++i) {\n                if (typeof object.streams[i] !== \"object\")\n                    throw TypeError(\".SetWebRTCStream.streams: object expected\");\n                message.streams[i] = $root.WebRTCStream.fromObject(object.streams[i]);\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a SetWebRTCStream message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof SetWebRTCStream\n     * @static\n     * @param {SetWebRTCStream} message SetWebRTCStream\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    SetWebRTCStream.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults)\n            object.streams = [];\n        if (options.defaults)\n            object.deviceId = \"\";\n        if (message.deviceId != null && message.hasOwnProperty(\"deviceId\"))\n            object.deviceId = message.deviceId;\n        if (message.streams && message.streams.length) {\n            object.streams = [];\n            for (var j = 0; j < message.streams.length; ++j)\n                object.streams[j] = $root.WebRTCStream.toObject(message.streams[j], options);\n        }\n        return object;\n    };\n\n    /**\n     * Converts this SetWebRTCStream to JSON.\n     * @function toJSON\n     * @memberof SetWebRTCStream\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    SetWebRTCStream.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return SetWebRTCStream;\n})();\n\n$root.SetActivity = (function() {\n\n    /**\n     * Properties of a SetActivity.\n     * @exports ISetActivity\n     * @interface ISetActivity\n     * @property {string|null} [deviceId] SetActivity deviceId\n     * @property {IActivity|null} [activity] SetActivity activity\n     */\n\n    /**\n     * Constructs a new SetActivity.\n     * @exports SetActivity\n     * @classdesc Represents a SetActivity.\n     * @implements ISetActivity\n     * @constructor\n     * @param {ISetActivity=} [properties] Properties to set\n     */\n    function SetActivity(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * SetActivity deviceId.\n     * @member {string} deviceId\n     * @memberof SetActivity\n     * @instance\n     */\n    SetActivity.prototype.deviceId = \"\";\n\n    /**\n     * SetActivity activity.\n     * @member {IActivity|null|undefined} activity\n     * @memberof SetActivity\n     * @instance\n     */\n    SetActivity.prototype.activity = null;\n\n    /**\n     * Creates a new SetActivity instance using the specified properties.\n     * @function create\n     * @memberof SetActivity\n     * @static\n     * @param {ISetActivity=} [properties] Properties to set\n     * @returns {SetActivity} SetActivity instance\n     */\n    SetActivity.create = function create(properties) {\n        return new SetActivity(properties);\n    };\n\n    /**\n     * Encodes the specified SetActivity message. Does not implicitly {@link SetActivity.verify|verify} messages.\n     * @function encode\n     * @memberof SetActivity\n     * @static\n     * @param {ISetActivity} message SetActivity message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    SetActivity.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.deviceId != null && Object.hasOwnProperty.call(message, \"deviceId\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.deviceId);\n        if (message.activity != null && Object.hasOwnProperty.call(message, \"activity\"))\n            $root.Activity.encode(message.activity, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified SetActivity message, length delimited. Does not implicitly {@link SetActivity.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof SetActivity\n     * @static\n     * @param {ISetActivity} message SetActivity message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    SetActivity.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a SetActivity message from the specified reader or buffer.\n     * @function decode\n     * @memberof SetActivity\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {SetActivity} SetActivity\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    SetActivity.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SetActivity();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.deviceId = reader.string();\n                break;\n            case 2:\n                message.activity = $root.Activity.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a SetActivity message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof SetActivity\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {SetActivity} SetActivity\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    SetActivity.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a SetActivity message.\n     * @function verify\n     * @memberof SetActivity\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    SetActivity.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.deviceId != null && message.hasOwnProperty(\"deviceId\"))\n            if (!$util.isString(message.deviceId))\n                return \"deviceId: string expected\";\n        if (message.activity != null && message.hasOwnProperty(\"activity\")) {\n            var error = $root.Activity.verify(message.activity);\n            if (error)\n                return \"activity.\" + error;\n        }\n        return null;\n    };\n\n    /**\n     * Creates a SetActivity message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof SetActivity\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {SetActivity} SetActivity\n     */\n    SetActivity.fromObject = function fromObject(object) {\n        if (object instanceof $root.SetActivity)\n            return object;\n        var message = new $root.SetActivity();\n        if (object.deviceId != null)\n            message.deviceId = String(object.deviceId);\n        if (object.activity != null) {\n            if (typeof object.activity !== \"object\")\n                throw TypeError(\".SetActivity.activity: object expected\");\n            message.activity = $root.Activity.fromObject(object.activity);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a SetActivity message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof SetActivity\n     * @static\n     * @param {SetActivity} message SetActivity\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    SetActivity.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.deviceId = \"\";\n            object.activity = null;\n        }\n        if (message.deviceId != null && message.hasOwnProperty(\"deviceId\"))\n            object.deviceId = message.deviceId;\n        if (message.activity != null && message.hasOwnProperty(\"activity\"))\n            object.activity = $root.Activity.toObject(message.activity, options);\n        return object;\n    };\n\n    /**\n     * Converts this SetActivity to JSON.\n     * @function toJSON\n     * @memberof SetActivity\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    SetActivity.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return SetActivity;\n})();\n\n$root.SetHost = (function() {\n\n    /**\n     * Properties of a SetHost.\n     * @exports ISetHost\n     * @interface ISetHost\n     * @property {string|null} [id] SetHost id\n     */\n\n    /**\n     * Constructs a new SetHost.\n     * @exports SetHost\n     * @classdesc Represents a SetHost.\n     * @implements ISetHost\n     * @constructor\n     * @param {ISetHost=} [properties] Properties to set\n     */\n    function SetHost(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * SetHost id.\n     * @member {string} id\n     * @memberof SetHost\n     * @instance\n     */\n    SetHost.prototype.id = \"\";\n\n    /**\n     * Creates a new SetHost instance using the specified properties.\n     * @function create\n     * @memberof SetHost\n     * @static\n     * @param {ISetHost=} [properties] Properties to set\n     * @returns {SetHost} SetHost instance\n     */\n    SetHost.create = function create(properties) {\n        return new SetHost(properties);\n    };\n\n    /**\n     * Encodes the specified SetHost message. Does not implicitly {@link SetHost.verify|verify} messages.\n     * @function encode\n     * @memberof SetHost\n     * @static\n     * @param {ISetHost} message SetHost message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    SetHost.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.id != null && Object.hasOwnProperty.call(message, \"id\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified SetHost message, length delimited. Does not implicitly {@link SetHost.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof SetHost\n     * @static\n     * @param {ISetHost} message SetHost message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    SetHost.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a SetHost message from the specified reader or buffer.\n     * @function decode\n     * @memberof SetHost\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {SetHost} SetHost\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    SetHost.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SetHost();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.id = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a SetHost message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof SetHost\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {SetHost} SetHost\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    SetHost.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a SetHost message.\n     * @function verify\n     * @memberof SetHost\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    SetHost.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.id != null && message.hasOwnProperty(\"id\"))\n            if (!$util.isString(message.id))\n                return \"id: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a SetHost message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof SetHost\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {SetHost} SetHost\n     */\n    SetHost.fromObject = function fromObject(object) {\n        if (object instanceof $root.SetHost)\n            return object;\n        var message = new $root.SetHost();\n        if (object.id != null)\n            message.id = String(object.id);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a SetHost message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof SetHost\n     * @static\n     * @param {SetHost} message SetHost\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    SetHost.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults)\n            object.id = \"\";\n        if (message.id != null && message.hasOwnProperty(\"id\"))\n            object.id = message.id;\n        return object;\n    };\n\n    /**\n     * Converts this SetHost to JSON.\n     * @function toJSON\n     * @memberof SetHost\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    SetHost.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return SetHost;\n})();\n\n$root.AddTrophy = (function() {\n\n    /**\n     * Properties of an AddTrophy.\n     * @exports IAddTrophy\n     * @interface IAddTrophy\n     * @property {string|null} [trophyId] AddTrophy trophyId\n     * @property {number|Long|null} [timestamp] AddTrophy timestamp\n     * @property {string|null} [userId] AddTrophy userId\n     */\n\n    /**\n     * Constructs a new AddTrophy.\n     * @exports AddTrophy\n     * @classdesc Represents an AddTrophy.\n     * @implements IAddTrophy\n     * @constructor\n     * @param {IAddTrophy=} [properties] Properties to set\n     */\n    function AddTrophy(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * AddTrophy trophyId.\n     * @member {string} trophyId\n     * @memberof AddTrophy\n     * @instance\n     */\n    AddTrophy.prototype.trophyId = \"\";\n\n    /**\n     * AddTrophy timestamp.\n     * @member {number|Long} timestamp\n     * @memberof AddTrophy\n     * @instance\n     */\n    AddTrophy.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * AddTrophy userId.\n     * @member {string} userId\n     * @memberof AddTrophy\n     * @instance\n     */\n    AddTrophy.prototype.userId = \"\";\n\n    /**\n     * Creates a new AddTrophy instance using the specified properties.\n     * @function create\n     * @memberof AddTrophy\n     * @static\n     * @param {IAddTrophy=} [properties] Properties to set\n     * @returns {AddTrophy} AddTrophy instance\n     */\n    AddTrophy.create = function create(properties) {\n        return new AddTrophy(properties);\n    };\n\n    /**\n     * Encodes the specified AddTrophy message. Does not implicitly {@link AddTrophy.verify|verify} messages.\n     * @function encode\n     * @memberof AddTrophy\n     * @static\n     * @param {IAddTrophy} message AddTrophy message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    AddTrophy.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.trophyId != null && Object.hasOwnProperty.call(message, \"trophyId\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.trophyId);\n        if (message.timestamp != null && Object.hasOwnProperty.call(message, \"timestamp\"))\n            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.timestamp);\n        if (message.userId != null && Object.hasOwnProperty.call(message, \"userId\"))\n            writer.uint32(/* id 3, wireType 2 =*/26).string(message.userId);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified AddTrophy message, length delimited. Does not implicitly {@link AddTrophy.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof AddTrophy\n     * @static\n     * @param {IAddTrophy} message AddTrophy message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    AddTrophy.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes an AddTrophy message from the specified reader or buffer.\n     * @function decode\n     * @memberof AddTrophy\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {AddTrophy} AddTrophy\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    AddTrophy.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.AddTrophy();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.trophyId = reader.string();\n                break;\n            case 2:\n                message.timestamp = reader.uint64();\n                break;\n            case 3:\n                message.userId = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes an AddTrophy message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof AddTrophy\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {AddTrophy} AddTrophy\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    AddTrophy.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies an AddTrophy message.\n     * @function verify\n     * @memberof AddTrophy\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    AddTrophy.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.trophyId != null && message.hasOwnProperty(\"trophyId\"))\n            if (!$util.isString(message.trophyId))\n                return \"trophyId: string expected\";\n        if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n            if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))\n                return \"timestamp: integer|Long expected\";\n        if (message.userId != null && message.hasOwnProperty(\"userId\"))\n            if (!$util.isString(message.userId))\n                return \"userId: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates an AddTrophy message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof AddTrophy\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {AddTrophy} AddTrophy\n     */\n    AddTrophy.fromObject = function fromObject(object) {\n        if (object instanceof $root.AddTrophy)\n            return object;\n        var message = new $root.AddTrophy();\n        if (object.trophyId != null)\n            message.trophyId = String(object.trophyId);\n        if (object.timestamp != null)\n            if ($util.Long)\n                (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = true;\n            else if (typeof object.timestamp === \"string\")\n                message.timestamp = parseInt(object.timestamp, 10);\n            else if (typeof object.timestamp === \"number\")\n                message.timestamp = object.timestamp;\n            else if (typeof object.timestamp === \"object\")\n                message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber(true);\n        if (object.userId != null)\n            message.userId = String(object.userId);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from an AddTrophy message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof AddTrophy\n     * @static\n     * @param {AddTrophy} message AddTrophy\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    AddTrophy.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.trophyId = \"\";\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, true);\n                object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.timestamp = options.longs === String ? \"0\" : 0;\n            object.userId = \"\";\n        }\n        if (message.trophyId != null && message.hasOwnProperty(\"trophyId\"))\n            object.trophyId = message.trophyId;\n        if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n            if (typeof message.timestamp === \"number\")\n                object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;\n            else\n                object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber(true) : message.timestamp;\n        if (message.userId != null && message.hasOwnProperty(\"userId\"))\n            object.userId = message.userId;\n        return object;\n    };\n\n    /**\n     * Converts this AddTrophy to JSON.\n     * @function toJSON\n     * @memberof AddTrophy\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    AddTrophy.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return AddTrophy;\n})();\n\n$root.SetContent = (function() {\n\n    /**\n     * Properties of a SetContent.\n     * @exports ISetContent\n     * @interface ISetContent\n     * @property {IContent|null} [content] SetContent content\n     */\n\n    /**\n     * Constructs a new SetContent.\n     * @exports SetContent\n     * @classdesc Represents a SetContent.\n     * @implements ISetContent\n     * @constructor\n     * @param {ISetContent=} [properties] Properties to set\n     */\n    function SetContent(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * SetContent content.\n     * @member {IContent|null|undefined} content\n     * @memberof SetContent\n     * @instance\n     */\n    SetContent.prototype.content = null;\n\n    /**\n     * Creates a new SetContent instance using the specified properties.\n     * @function create\n     * @memberof SetContent\n     * @static\n     * @param {ISetContent=} [properties] Properties to set\n     * @returns {SetContent} SetContent instance\n     */\n    SetContent.create = function create(properties) {\n        return new SetContent(properties);\n    };\n\n    /**\n     * Encodes the specified SetContent message. Does not implicitly {@link SetContent.verify|verify} messages.\n     * @function encode\n     * @memberof SetContent\n     * @static\n     * @param {ISetContent} message SetContent message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    SetContent.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.content != null && Object.hasOwnProperty.call(message, \"content\"))\n            $root.Content.encode(message.content, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified SetContent message, length delimited. Does not implicitly {@link SetContent.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof SetContent\n     * @static\n     * @param {ISetContent} message SetContent message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    SetContent.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a SetContent message from the specified reader or buffer.\n     * @function decode\n     * @memberof SetContent\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {SetContent} SetContent\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    SetContent.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SetContent();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.content = $root.Content.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a SetContent message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof SetContent\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {SetContent} SetContent\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    SetContent.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a SetContent message.\n     * @function verify\n     * @memberof SetContent\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    SetContent.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.content != null && message.hasOwnProperty(\"content\")) {\n            var error = $root.Content.verify(message.content);\n            if (error)\n                return \"content.\" + error;\n        }\n        return null;\n    };\n\n    /**\n     * Creates a SetContent message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof SetContent\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {SetContent} SetContent\n     */\n    SetContent.fromObject = function fromObject(object) {\n        if (object instanceof $root.SetContent)\n            return object;\n        var message = new $root.SetContent();\n        if (object.content != null) {\n            if (typeof object.content !== \"object\")\n                throw TypeError(\".SetContent.content: object expected\");\n            message.content = $root.Content.fromObject(object.content);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a SetContent message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof SetContent\n     * @static\n     * @param {SetContent} message SetContent\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    SetContent.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults)\n            object.content = null;\n        if (message.content != null && message.hasOwnProperty(\"content\"))\n            object.content = $root.Content.toObject(message.content, options);\n        return object;\n    };\n\n    /**\n     * Converts this SetContent to JSON.\n     * @function toJSON\n     * @memberof SetContent\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    SetContent.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return SetContent;\n})();\n\n$root.SendChatMessage = (function() {\n\n    /**\n     * Properties of a SendChatMessage.\n     * @exports ISendChatMessage\n     * @interface ISendChatMessage\n     * @property {string|null} [message] SendChatMessage message\n     */\n\n    /**\n     * Constructs a new SendChatMessage.\n     * @exports SendChatMessage\n     * @classdesc Represents a SendChatMessage.\n     * @implements ISendChatMessage\n     * @constructor\n     * @param {ISendChatMessage=} [properties] Properties to set\n     */\n    function SendChatMessage(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * SendChatMessage message.\n     * @member {string} message\n     * @memberof SendChatMessage\n     * @instance\n     */\n    SendChatMessage.prototype.message = \"\";\n\n    /**\n     * Creates a new SendChatMessage instance using the specified properties.\n     * @function create\n     * @memberof SendChatMessage\n     * @static\n     * @param {ISendChatMessage=} [properties] Properties to set\n     * @returns {SendChatMessage} SendChatMessage instance\n     */\n    SendChatMessage.create = function create(properties) {\n        return new SendChatMessage(properties);\n    };\n\n    /**\n     * Encodes the specified SendChatMessage message. Does not implicitly {@link SendChatMessage.verify|verify} messages.\n     * @function encode\n     * @memberof SendChatMessage\n     * @static\n     * @param {ISendChatMessage} message SendChatMessage message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    SendChatMessage.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.message != null && Object.hasOwnProperty.call(message, \"message\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.message);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified SendChatMessage message, length delimited. Does not implicitly {@link SendChatMessage.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof SendChatMessage\n     * @static\n     * @param {ISendChatMessage} message SendChatMessage message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    SendChatMessage.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a SendChatMessage message from the specified reader or buffer.\n     * @function decode\n     * @memberof SendChatMessage\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {SendChatMessage} SendChatMessage\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    SendChatMessage.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SendChatMessage();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.message = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a SendChatMessage message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof SendChatMessage\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {SendChatMessage} SendChatMessage\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    SendChatMessage.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a SendChatMessage message.\n     * @function verify\n     * @memberof SendChatMessage\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    SendChatMessage.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.message != null && message.hasOwnProperty(\"message\"))\n            if (!$util.isString(message.message))\n                return \"message: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a SendChatMessage message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof SendChatMessage\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {SendChatMessage} SendChatMessage\n     */\n    SendChatMessage.fromObject = function fromObject(object) {\n        if (object instanceof $root.SendChatMessage)\n            return object;\n        var message = new $root.SendChatMessage();\n        if (object.message != null)\n            message.message = String(object.message);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a SendChatMessage message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof SendChatMessage\n     * @static\n     * @param {SendChatMessage} message SendChatMessage\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    SendChatMessage.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults)\n            object.message = \"\";\n        if (message.message != null && message.hasOwnProperty(\"message\"))\n            object.message = message.message;\n        return object;\n    };\n\n    /**\n     * Converts this SendChatMessage to JSON.\n     * @function toJSON\n     * @memberof SendChatMessage\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    SendChatMessage.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return SendChatMessage;\n})();\n\n$root.StateChanges = (function() {\n\n    /**\n     * Properties of a StateChanges.\n     * @exports IStateChanges\n     * @interface IStateChanges\n     * @property {Array.<IStateDiff>|null} [changes] StateChanges changes\n     */\n\n    /**\n     * Constructs a new StateChanges.\n     * @exports StateChanges\n     * @classdesc Represents a StateChanges.\n     * @implements IStateChanges\n     * @constructor\n     * @param {IStateChanges=} [properties] Properties to set\n     */\n    function StateChanges(properties) {\n        this.changes = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * StateChanges changes.\n     * @member {Array.<IStateDiff>} changes\n     * @memberof StateChanges\n     * @instance\n     */\n    StateChanges.prototype.changes = $util.emptyArray;\n\n    /**\n     * Creates a new StateChanges instance using the specified properties.\n     * @function create\n     * @memberof StateChanges\n     * @static\n     * @param {IStateChanges=} [properties] Properties to set\n     * @returns {StateChanges} StateChanges instance\n     */\n    StateChanges.create = function create(properties) {\n        return new StateChanges(properties);\n    };\n\n    /**\n     * Encodes the specified StateChanges message. Does not implicitly {@link StateChanges.verify|verify} messages.\n     * @function encode\n     * @memberof StateChanges\n     * @static\n     * @param {IStateChanges} message StateChanges message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    StateChanges.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.changes != null && message.changes.length)\n            for (var i = 0; i < message.changes.length; ++i)\n                $root.StateDiff.encode(message.changes[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified StateChanges message, length delimited. Does not implicitly {@link StateChanges.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof StateChanges\n     * @static\n     * @param {IStateChanges} message StateChanges message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    StateChanges.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a StateChanges message from the specified reader or buffer.\n     * @function decode\n     * @memberof StateChanges\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {StateChanges} StateChanges\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    StateChanges.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.StateChanges();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                if (!(message.changes && message.changes.length))\n                    message.changes = [];\n                message.changes.push($root.StateDiff.decode(reader, reader.uint32()));\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a StateChanges message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof StateChanges\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {StateChanges} StateChanges\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    StateChanges.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a StateChanges message.\n     * @function verify\n     * @memberof StateChanges\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    StateChanges.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.changes != null && message.hasOwnProperty(\"changes\")) {\n            if (!Array.isArray(message.changes))\n                return \"changes: array expected\";\n            for (var i = 0; i < message.changes.length; ++i) {\n                var error = $root.StateDiff.verify(message.changes[i]);\n                if (error)\n                    return \"changes.\" + error;\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Creates a StateChanges message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof StateChanges\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {StateChanges} StateChanges\n     */\n    StateChanges.fromObject = function fromObject(object) {\n        if (object instanceof $root.StateChanges)\n            return object;\n        var message = new $root.StateChanges();\n        if (object.changes) {\n            if (!Array.isArray(object.changes))\n                throw TypeError(\".StateChanges.changes: array expected\");\n            message.changes = [];\n            for (var i = 0; i < object.changes.length; ++i) {\n                if (typeof object.changes[i] !== \"object\")\n                    throw TypeError(\".StateChanges.changes: object expected\");\n                message.changes[i] = $root.StateDiff.fromObject(object.changes[i]);\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a StateChanges message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof StateChanges\n     * @static\n     * @param {StateChanges} message StateChanges\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    StateChanges.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults)\n            object.changes = [];\n        if (message.changes && message.changes.length) {\n            object.changes = [];\n            for (var j = 0; j < message.changes.length; ++j)\n                object.changes[j] = $root.StateDiff.toObject(message.changes[j], options);\n        }\n        return object;\n    };\n\n    /**\n     * Converts this StateChanges to JSON.\n     * @function toJSON\n     * @memberof StateChanges\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    StateChanges.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return StateChanges;\n})();\n\n$root.StateDiff = (function() {\n\n    /**\n     * Properties of a StateDiff.\n     * @exports IStateDiff\n     * @interface IStateDiff\n     * @property {IState|null} [setState] StateDiff setState\n     * @property {IAddParticipants|null} [addParticipants] StateDiff addParticipants\n     * @property {IRemoveParticipants|null} [removeParticipants] StateDiff removeParticipants\n     * @property {IChangeContent|null} [changeContent] StateDiff changeContent\n     * @property {IChangeHost|null} [changeHost] StateDiff changeHost\n     * @property {IAppendChatMessage|null} [appendChatMessage] StateDiff appendChatMessage\n     * @property {IReceiveTrophy|null} [receiveTrophy] StateDiff receiveTrophy\n     * @property {IClassEnded|null} [classEnded] StateDiff classEnded\n     */\n\n    /**\n     * Constructs a new StateDiff.\n     * @exports StateDiff\n     * @classdesc Represents a StateDiff.\n     * @implements IStateDiff\n     * @constructor\n     * @param {IStateDiff=} [properties] Properties to set\n     */\n    function StateDiff(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * StateDiff setState.\n     * @member {IState|null|undefined} setState\n     * @memberof StateDiff\n     * @instance\n     */\n    StateDiff.prototype.setState = null;\n\n    /**\n     * StateDiff addParticipants.\n     * @member {IAddParticipants|null|undefined} addParticipants\n     * @memberof StateDiff\n     * @instance\n     */\n    StateDiff.prototype.addParticipants = null;\n\n    /**\n     * StateDiff removeParticipants.\n     * @member {IRemoveParticipants|null|undefined} removeParticipants\n     * @memberof StateDiff\n     * @instance\n     */\n    StateDiff.prototype.removeParticipants = null;\n\n    /**\n     * StateDiff changeContent.\n     * @member {IChangeContent|null|undefined} changeContent\n     * @memberof StateDiff\n     * @instance\n     */\n    StateDiff.prototype.changeContent = null;\n\n    /**\n     * StateDiff changeHost.\n     * @member {IChangeHost|null|undefined} changeHost\n     * @memberof StateDiff\n     * @instance\n     */\n    StateDiff.prototype.changeHost = null;\n\n    /**\n     * StateDiff appendChatMessage.\n     * @member {IAppendChatMessage|null|undefined} appendChatMessage\n     * @memberof StateDiff\n     * @instance\n     */\n    StateDiff.prototype.appendChatMessage = null;\n\n    /**\n     * StateDiff receiveTrophy.\n     * @member {IReceiveTrophy|null|undefined} receiveTrophy\n     * @memberof StateDiff\n     * @instance\n     */\n    StateDiff.prototype.receiveTrophy = null;\n\n    /**\n     * StateDiff classEnded.\n     * @member {IClassEnded|null|undefined} classEnded\n     * @memberof StateDiff\n     * @instance\n     */\n    StateDiff.prototype.classEnded = null;\n\n    // OneOf field names bound to virtual getters and setters\n    var $oneOfFields;\n\n    /**\n     * StateDiff action.\n     * @member {\"setState\"|\"addParticipants\"|\"removeParticipants\"|\"changeContent\"|\"changeHost\"|\"appendChatMessage\"|\"receiveTrophy\"|\"classEnded\"|undefined} action\n     * @memberof StateDiff\n     * @instance\n     */\n    Object.defineProperty(StateDiff.prototype, \"action\", {\n        get: $util.oneOfGetter($oneOfFields = [\"setState\", \"addParticipants\", \"removeParticipants\", \"changeContent\", \"changeHost\", \"appendChatMessage\", \"receiveTrophy\", \"classEnded\"]),\n        set: $util.oneOfSetter($oneOfFields)\n    });\n\n    /**\n     * Creates a new StateDiff instance using the specified properties.\n     * @function create\n     * @memberof StateDiff\n     * @static\n     * @param {IStateDiff=} [properties] Properties to set\n     * @returns {StateDiff} StateDiff instance\n     */\n    StateDiff.create = function create(properties) {\n        return new StateDiff(properties);\n    };\n\n    /**\n     * Encodes the specified StateDiff message. Does not implicitly {@link StateDiff.verify|verify} messages.\n     * @function encode\n     * @memberof StateDiff\n     * @static\n     * @param {IStateDiff} message StateDiff message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    StateDiff.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.setState != null && Object.hasOwnProperty.call(message, \"setState\"))\n            $root.State.encode(message.setState, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.addParticipants != null && Object.hasOwnProperty.call(message, \"addParticipants\"))\n            $root.AddParticipants.encode(message.addParticipants, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        if (message.removeParticipants != null && Object.hasOwnProperty.call(message, \"removeParticipants\"))\n            $root.RemoveParticipants.encode(message.removeParticipants, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n        if (message.changeContent != null && Object.hasOwnProperty.call(message, \"changeContent\"))\n            $root.ChangeContent.encode(message.changeContent, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n        if (message.changeHost != null && Object.hasOwnProperty.call(message, \"changeHost\"))\n            $root.ChangeHost.encode(message.changeHost, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n        if (message.appendChatMessage != null && Object.hasOwnProperty.call(message, \"appendChatMessage\"))\n            $root.AppendChatMessage.encode(message.appendChatMessage, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n        if (message.receiveTrophy != null && Object.hasOwnProperty.call(message, \"receiveTrophy\"))\n            $root.ReceiveTrophy.encode(message.receiveTrophy, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n        if (message.classEnded != null && Object.hasOwnProperty.call(message, \"classEnded\"))\n            $root.ClassEnded.encode(message.classEnded, writer.uint32(/* id 16, wireType 2 =*/130).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified StateDiff message, length delimited. Does not implicitly {@link StateDiff.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof StateDiff\n     * @static\n     * @param {IStateDiff} message StateDiff message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    StateDiff.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a StateDiff message from the specified reader or buffer.\n     * @function decode\n     * @memberof StateDiff\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {StateDiff} StateDiff\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    StateDiff.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.StateDiff();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.setState = $root.State.decode(reader, reader.uint32());\n                break;\n            case 2:\n                message.addParticipants = $root.AddParticipants.decode(reader, reader.uint32());\n                break;\n            case 3:\n                message.removeParticipants = $root.RemoveParticipants.decode(reader, reader.uint32());\n                break;\n            case 4:\n                message.changeContent = $root.ChangeContent.decode(reader, reader.uint32());\n                break;\n            case 5:\n                message.changeHost = $root.ChangeHost.decode(reader, reader.uint32());\n                break;\n            case 6:\n                message.appendChatMessage = $root.AppendChatMessage.decode(reader, reader.uint32());\n                break;\n            case 7:\n                message.receiveTrophy = $root.ReceiveTrophy.decode(reader, reader.uint32());\n                break;\n            case 16:\n                message.classEnded = $root.ClassEnded.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a StateDiff message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof StateDiff\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {StateDiff} StateDiff\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    StateDiff.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a StateDiff message.\n     * @function verify\n     * @memberof StateDiff\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    StateDiff.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        var properties = {};\n        if (message.setState != null && message.hasOwnProperty(\"setState\")) {\n            properties.action = 1;\n            {\n                var error = $root.State.verify(message.setState);\n                if (error)\n                    return \"setState.\" + error;\n            }\n        }\n        if (message.addParticipants != null && message.hasOwnProperty(\"addParticipants\")) {\n            if (properties.action === 1)\n                return \"action: multiple values\";\n            properties.action = 1;\n            {\n                var error = $root.AddParticipants.verify(message.addParticipants);\n                if (error)\n                    return \"addParticipants.\" + error;\n            }\n        }\n        if (message.removeParticipants != null && message.hasOwnProperty(\"removeParticipants\")) {\n            if (properties.action === 1)\n                return \"action: multiple values\";\n            properties.action = 1;\n            {\n                var error = $root.RemoveParticipants.verify(message.removeParticipants);\n                if (error)\n                    return \"removeParticipants.\" + error;\n            }\n        }\n        if (message.changeContent != null && message.hasOwnProperty(\"changeContent\")) {\n            if (properties.action === 1)\n                return \"action: multiple values\";\n            properties.action = 1;\n            {\n                var error = $root.ChangeContent.verify(message.changeContent);\n                if (error)\n                    return \"changeContent.\" + error;\n            }\n        }\n        if (message.changeHost != null && message.hasOwnProperty(\"changeHost\")) {\n            if (properties.action === 1)\n                return \"action: multiple values\";\n            properties.action = 1;\n            {\n                var error = $root.ChangeHost.verify(message.changeHost);\n                if (error)\n                    return \"changeHost.\" + error;\n            }\n        }\n        if (message.appendChatMessage != null && message.hasOwnProperty(\"appendChatMessage\")) {\n            if (properties.action === 1)\n                return \"action: multiple values\";\n            properties.action = 1;\n            {\n                var error = $root.AppendChatMessage.verify(message.appendChatMessage);\n                if (error)\n                    return \"appendChatMessage.\" + error;\n            }\n        }\n        if (message.receiveTrophy != null && message.hasOwnProperty(\"receiveTrophy\")) {\n            if (properties.action === 1)\n                return \"action: multiple values\";\n            properties.action = 1;\n            {\n                var error = $root.ReceiveTrophy.verify(message.receiveTrophy);\n                if (error)\n                    return \"receiveTrophy.\" + error;\n            }\n        }\n        if (message.classEnded != null && message.hasOwnProperty(\"classEnded\")) {\n            if (properties.action === 1)\n                return \"action: multiple values\";\n            properties.action = 1;\n            {\n                var error = $root.ClassEnded.verify(message.classEnded);\n                if (error)\n                    return \"classEnded.\" + error;\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Creates a StateDiff message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof StateDiff\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {StateDiff} StateDiff\n     */\n    StateDiff.fromObject = function fromObject(object) {\n        if (object instanceof $root.StateDiff)\n            return object;\n        var message = new $root.StateDiff();\n        if (object.setState != null) {\n            if (typeof object.setState !== \"object\")\n                throw TypeError(\".StateDiff.setState: object expected\");\n            message.setState = $root.State.fromObject(object.setState);\n        }\n        if (object.addParticipants != null) {\n            if (typeof object.addParticipants !== \"object\")\n                throw TypeError(\".StateDiff.addParticipants: object expected\");\n            message.addParticipants = $root.AddParticipants.fromObject(object.addParticipants);\n        }\n        if (object.removeParticipants != null) {\n            if (typeof object.removeParticipants !== \"object\")\n                throw TypeError(\".StateDiff.removeParticipants: object expected\");\n            message.removeParticipants = $root.RemoveParticipants.fromObject(object.removeParticipants);\n        }\n        if (object.changeContent != null) {\n            if (typeof object.changeContent !== \"object\")\n                throw TypeError(\".StateDiff.changeContent: object expected\");\n            message.changeContent = $root.ChangeContent.fromObject(object.changeContent);\n        }\n        if (object.changeHost != null) {\n            if (typeof object.changeHost !== \"object\")\n                throw TypeError(\".StateDiff.changeHost: object expected\");\n            message.changeHost = $root.ChangeHost.fromObject(object.changeHost);\n        }\n        if (object.appendChatMessage != null) {\n            if (typeof object.appendChatMessage !== \"object\")\n                throw TypeError(\".StateDiff.appendChatMessage: object expected\");\n            message.appendChatMessage = $root.AppendChatMessage.fromObject(object.appendChatMessage);\n        }\n        if (object.receiveTrophy != null) {\n            if (typeof object.receiveTrophy !== \"object\")\n                throw TypeError(\".StateDiff.receiveTrophy: object expected\");\n            message.receiveTrophy = $root.ReceiveTrophy.fromObject(object.receiveTrophy);\n        }\n        if (object.classEnded != null) {\n            if (typeof object.classEnded !== \"object\")\n                throw TypeError(\".StateDiff.classEnded: object expected\");\n            message.classEnded = $root.ClassEnded.fromObject(object.classEnded);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a StateDiff message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof StateDiff\n     * @static\n     * @param {StateDiff} message StateDiff\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    StateDiff.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (message.setState != null && message.hasOwnProperty(\"setState\")) {\n            object.setState = $root.State.toObject(message.setState, options);\n            if (options.oneofs)\n                object.action = \"setState\";\n        }\n        if (message.addParticipants != null && message.hasOwnProperty(\"addParticipants\")) {\n            object.addParticipants = $root.AddParticipants.toObject(message.addParticipants, options);\n            if (options.oneofs)\n                object.action = \"addParticipants\";\n        }\n        if (message.removeParticipants != null && message.hasOwnProperty(\"removeParticipants\")) {\n            object.removeParticipants = $root.RemoveParticipants.toObject(message.removeParticipants, options);\n            if (options.oneofs)\n                object.action = \"removeParticipants\";\n        }\n        if (message.changeContent != null && message.hasOwnProperty(\"changeContent\")) {\n            object.changeContent = $root.ChangeContent.toObject(message.changeContent, options);\n            if (options.oneofs)\n                object.action = \"changeContent\";\n        }\n        if (message.changeHost != null && message.hasOwnProperty(\"changeHost\")) {\n            object.changeHost = $root.ChangeHost.toObject(message.changeHost, options);\n            if (options.oneofs)\n                object.action = \"changeHost\";\n        }\n        if (message.appendChatMessage != null && message.hasOwnProperty(\"appendChatMessage\")) {\n            object.appendChatMessage = $root.AppendChatMessage.toObject(message.appendChatMessage, options);\n            if (options.oneofs)\n                object.action = \"appendChatMessage\";\n        }\n        if (message.receiveTrophy != null && message.hasOwnProperty(\"receiveTrophy\")) {\n            object.receiveTrophy = $root.ReceiveTrophy.toObject(message.receiveTrophy, options);\n            if (options.oneofs)\n                object.action = \"receiveTrophy\";\n        }\n        if (message.classEnded != null && message.hasOwnProperty(\"classEnded\")) {\n            object.classEnded = $root.ClassEnded.toObject(message.classEnded, options);\n            if (options.oneofs)\n                object.action = \"classEnded\";\n        }\n        return object;\n    };\n\n    /**\n     * Converts this StateDiff to JSON.\n     * @function toJSON\n     * @memberof StateDiff\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    StateDiff.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return StateDiff;\n})();\n\n$root.Participant = (function() {\n\n    /**\n     * Properties of a Participant.\n     * @exports IParticipant\n     * @interface IParticipant\n     * @property {string|null} [name] Participant name\n     * @property {Object.<string,IDevice>|null} [devices] Participant devices\n     * @property {Array.<ITrophy>|null} [trophies] Participant trophies\n     */\n\n    /**\n     * Constructs a new Participant.\n     * @exports Participant\n     * @classdesc Represents a Participant.\n     * @implements IParticipant\n     * @constructor\n     * @param {IParticipant=} [properties] Properties to set\n     */\n    function Participant(properties) {\n        this.devices = {};\n        this.trophies = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Participant name.\n     * @member {string} name\n     * @memberof Participant\n     * @instance\n     */\n    Participant.prototype.name = \"\";\n\n    /**\n     * Participant devices.\n     * @member {Object.<string,IDevice>} devices\n     * @memberof Participant\n     * @instance\n     */\n    Participant.prototype.devices = $util.emptyObject;\n\n    /**\n     * Participant trophies.\n     * @member {Array.<ITrophy>} trophies\n     * @memberof Participant\n     * @instance\n     */\n    Participant.prototype.trophies = $util.emptyArray;\n\n    /**\n     * Creates a new Participant instance using the specified properties.\n     * @function create\n     * @memberof Participant\n     * @static\n     * @param {IParticipant=} [properties] Properties to set\n     * @returns {Participant} Participant instance\n     */\n    Participant.create = function create(properties) {\n        return new Participant(properties);\n    };\n\n    /**\n     * Encodes the specified Participant message. Does not implicitly {@link Participant.verify|verify} messages.\n     * @function encode\n     * @memberof Participant\n     * @static\n     * @param {IParticipant} message Participant message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Participant.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n        if (message.devices != null && Object.hasOwnProperty.call(message, \"devices\"))\n            for (var keys = Object.keys(message.devices), i = 0; i < keys.length; ++i) {\n                writer.uint32(/* id 2, wireType 2 =*/18).fork().uint32(/* id 1, wireType 0 =*/8).uint32(keys[i]);\n                $root.Device.encode(message.devices[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n            }\n        if (message.trophies != null && message.trophies.length)\n            for (var i = 0; i < message.trophies.length; ++i)\n                $root.Trophy.encode(message.trophies[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified Participant message, length delimited. Does not implicitly {@link Participant.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Participant\n     * @static\n     * @param {IParticipant} message Participant message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Participant.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a Participant message from the specified reader or buffer.\n     * @function decode\n     * @memberof Participant\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Participant} Participant\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Participant.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Participant(), key;\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.name = reader.string();\n                break;\n            case 2:\n                reader.skip().pos++;\n                if (message.devices === $util.emptyObject)\n                    message.devices = {};\n                key = reader.uint32();\n                reader.pos++;\n                message.devices[key] = $root.Device.decode(reader, reader.uint32());\n                break;\n            case 3:\n                if (!(message.trophies && message.trophies.length))\n                    message.trophies = [];\n                message.trophies.push($root.Trophy.decode(reader, reader.uint32()));\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a Participant message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Participant\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Participant} Participant\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Participant.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a Participant message.\n     * @function verify\n     * @memberof Participant\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    Participant.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.name != null && message.hasOwnProperty(\"name\"))\n            if (!$util.isString(message.name))\n                return \"name: string expected\";\n        if (message.devices != null && message.hasOwnProperty(\"devices\")) {\n            if (!$util.isObject(message.devices))\n                return \"devices: object expected\";\n            var key = Object.keys(message.devices);\n            for (var i = 0; i < key.length; ++i) {\n                if (!$util.key32Re.test(key[i]))\n                    return \"devices: integer key{k:uint32} expected\";\n                {\n                    var error = $root.Device.verify(message.devices[key[i]]);\n                    if (error)\n                        return \"devices.\" + error;\n                }\n            }\n        }\n        if (message.trophies != null && message.hasOwnProperty(\"trophies\")) {\n            if (!Array.isArray(message.trophies))\n                return \"trophies: array expected\";\n            for (var i = 0; i < message.trophies.length; ++i) {\n                var error = $root.Trophy.verify(message.trophies[i]);\n                if (error)\n                    return \"trophies.\" + error;\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Creates a Participant message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Participant\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {Participant} Participant\n     */\n    Participant.fromObject = function fromObject(object) {\n        if (object instanceof $root.Participant)\n            return object;\n        var message = new $root.Participant();\n        if (object.name != null)\n            message.name = String(object.name);\n        if (object.devices) {\n            if (typeof object.devices !== \"object\")\n                throw TypeError(\".Participant.devices: object expected\");\n            message.devices = {};\n            for (var keys = Object.keys(object.devices), i = 0; i < keys.length; ++i) {\n                if (typeof object.devices[keys[i]] !== \"object\")\n                    throw TypeError(\".Participant.devices: object expected\");\n                message.devices[keys[i]] = $root.Device.fromObject(object.devices[keys[i]]);\n            }\n        }\n        if (object.trophies) {\n            if (!Array.isArray(object.trophies))\n                throw TypeError(\".Participant.trophies: array expected\");\n            message.trophies = [];\n            for (var i = 0; i < object.trophies.length; ++i) {\n                if (typeof object.trophies[i] !== \"object\")\n                    throw TypeError(\".Participant.trophies: object expected\");\n                message.trophies[i] = $root.Trophy.fromObject(object.trophies[i]);\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a Participant message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Participant\n     * @static\n     * @param {Participant} message Participant\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Participant.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults)\n            object.trophies = [];\n        if (options.objects || options.defaults)\n            object.devices = {};\n        if (options.defaults)\n            object.name = \"\";\n        if (message.name != null && message.hasOwnProperty(\"name\"))\n            object.name = message.name;\n        var keys2;\n        if (message.devices && (keys2 = Object.keys(message.devices)).length) {\n            object.devices = {};\n            for (var j = 0; j < keys2.length; ++j)\n                object.devices[keys2[j]] = $root.Device.toObject(message.devices[keys2[j]], options);\n        }\n        if (message.trophies && message.trophies.length) {\n            object.trophies = [];\n            for (var j = 0; j < message.trophies.length; ++j)\n                object.trophies[j] = $root.Trophy.toObject(message.trophies[j], options);\n        }\n        return object;\n    };\n\n    /**\n     * Converts this Participant to JSON.\n     * @function toJSON\n     * @memberof Participant\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Participant.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Participant;\n})();\n\n$root.State = (function() {\n\n    /**\n     * Properties of a State.\n     * @exports IState\n     * @interface IState\n     * @property {string|null} [roomId] State roomId\n     * @property {Object.<string,IParticipant>|null} [participants] State participants\n     * @property {string|null} [host] State host\n     * @property {IContent|null} [content] State content\n     * @property {Array.<IChatMessage>|null} [chatMessages] State chatMessages\n     * @property {number|null} [endTimestamp] State endTimestamp\n     */\n\n    /**\n     * Constructs a new State.\n     * @exports State\n     * @classdesc Represents a State.\n     * @implements IState\n     * @constructor\n     * @param {IState=} [properties] Properties to set\n     */\n    function State(properties) {\n        this.participants = {};\n        this.chatMessages = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * State roomId.\n     * @member {string} roomId\n     * @memberof State\n     * @instance\n     */\n    State.prototype.roomId = \"\";\n\n    /**\n     * State participants.\n     * @member {Object.<string,IParticipant>} participants\n     * @memberof State\n     * @instance\n     */\n    State.prototype.participants = $util.emptyObject;\n\n    /**\n     * State host.\n     * @member {string} host\n     * @memberof State\n     * @instance\n     */\n    State.prototype.host = \"\";\n\n    /**\n     * State content.\n     * @member {IContent|null|undefined} content\n     * @memberof State\n     * @instance\n     */\n    State.prototype.content = null;\n\n    /**\n     * State chatMessages.\n     * @member {Array.<IChatMessage>} chatMessages\n     * @memberof State\n     * @instance\n     */\n    State.prototype.chatMessages = $util.emptyArray;\n\n    /**\n     * State endTimestamp.\n     * @member {number} endTimestamp\n     * @memberof State\n     * @instance\n     */\n    State.prototype.endTimestamp = 0;\n\n    /**\n     * Creates a new State instance using the specified properties.\n     * @function create\n     * @memberof State\n     * @static\n     * @param {IState=} [properties] Properties to set\n     * @returns {State} State instance\n     */\n    State.create = function create(properties) {\n        return new State(properties);\n    };\n\n    /**\n     * Encodes the specified State message. Does not implicitly {@link State.verify|verify} messages.\n     * @function encode\n     * @memberof State\n     * @static\n     * @param {IState} message State message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    State.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.roomId != null && Object.hasOwnProperty.call(message, \"roomId\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.roomId);\n        if (message.participants != null && Object.hasOwnProperty.call(message, \"participants\"))\n            for (var keys = Object.keys(message.participants), i = 0; i < keys.length; ++i) {\n                writer.uint32(/* id 2, wireType 2 =*/18).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                $root.Participant.encode(message.participants[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n            }\n        if (message.host != null && Object.hasOwnProperty.call(message, \"host\"))\n            writer.uint32(/* id 3, wireType 2 =*/26).string(message.host);\n        if (message.content != null && Object.hasOwnProperty.call(message, \"content\"))\n            $root.Content.encode(message.content, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n        if (message.chatMessages != null && message.chatMessages.length)\n            for (var i = 0; i < message.chatMessages.length; ++i)\n                $root.ChatMessage.encode(message.chatMessages[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n        if (message.endTimestamp != null && Object.hasOwnProperty.call(message, \"endTimestamp\"))\n            writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.endTimestamp);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified State message, length delimited. Does not implicitly {@link State.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof State\n     * @static\n     * @param {IState} message State message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    State.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a State message from the specified reader or buffer.\n     * @function decode\n     * @memberof State\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {State} State\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    State.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.State(), key;\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.roomId = reader.string();\n                break;\n            case 2:\n                reader.skip().pos++;\n                if (message.participants === $util.emptyObject)\n                    message.participants = {};\n                key = reader.string();\n                reader.pos++;\n                message.participants[key] = $root.Participant.decode(reader, reader.uint32());\n                break;\n            case 3:\n                message.host = reader.string();\n                break;\n            case 4:\n                message.content = $root.Content.decode(reader, reader.uint32());\n                break;\n            case 5:\n                if (!(message.chatMessages && message.chatMessages.length))\n                    message.chatMessages = [];\n                message.chatMessages.push($root.ChatMessage.decode(reader, reader.uint32()));\n                break;\n            case 6:\n                message.endTimestamp = reader.uint32();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a State message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof State\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {State} State\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    State.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a State message.\n     * @function verify\n     * @memberof State\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    State.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.roomId != null && message.hasOwnProperty(\"roomId\"))\n            if (!$util.isString(message.roomId))\n                return \"roomId: string expected\";\n        if (message.participants != null && message.hasOwnProperty(\"participants\")) {\n            if (!$util.isObject(message.participants))\n                return \"participants: object expected\";\n            var key = Object.keys(message.participants);\n            for (var i = 0; i < key.length; ++i) {\n                var error = $root.Participant.verify(message.participants[key[i]]);\n                if (error)\n                    return \"participants.\" + error;\n            }\n        }\n        if (message.host != null && message.hasOwnProperty(\"host\"))\n            if (!$util.isString(message.host))\n                return \"host: string expected\";\n        if (message.content != null && message.hasOwnProperty(\"content\")) {\n            var error = $root.Content.verify(message.content);\n            if (error)\n                return \"content.\" + error;\n        }\n        if (message.chatMessages != null && message.hasOwnProperty(\"chatMessages\")) {\n            if (!Array.isArray(message.chatMessages))\n                return \"chatMessages: array expected\";\n            for (var i = 0; i < message.chatMessages.length; ++i) {\n                var error = $root.ChatMessage.verify(message.chatMessages[i]);\n                if (error)\n                    return \"chatMessages.\" + error;\n            }\n        }\n        if (message.endTimestamp != null && message.hasOwnProperty(\"endTimestamp\"))\n            if (!$util.isInteger(message.endTimestamp))\n                return \"endTimestamp: integer expected\";\n        return null;\n    };\n\n    /**\n     * Creates a State message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof State\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {State} State\n     */\n    State.fromObject = function fromObject(object) {\n        if (object instanceof $root.State)\n            return object;\n        var message = new $root.State();\n        if (object.roomId != null)\n            message.roomId = String(object.roomId);\n        if (object.participants) {\n            if (typeof object.participants !== \"object\")\n                throw TypeError(\".State.participants: object expected\");\n            message.participants = {};\n            for (var keys = Object.keys(object.participants), i = 0; i < keys.length; ++i) {\n                if (typeof object.participants[keys[i]] !== \"object\")\n                    throw TypeError(\".State.participants: object expected\");\n                message.participants[keys[i]] = $root.Participant.fromObject(object.participants[keys[i]]);\n            }\n        }\n        if (object.host != null)\n            message.host = String(object.host);\n        if (object.content != null) {\n            if (typeof object.content !== \"object\")\n                throw TypeError(\".State.content: object expected\");\n            message.content = $root.Content.fromObject(object.content);\n        }\n        if (object.chatMessages) {\n            if (!Array.isArray(object.chatMessages))\n                throw TypeError(\".State.chatMessages: array expected\");\n            message.chatMessages = [];\n            for (var i = 0; i < object.chatMessages.length; ++i) {\n                if (typeof object.chatMessages[i] !== \"object\")\n                    throw TypeError(\".State.chatMessages: object expected\");\n                message.chatMessages[i] = $root.ChatMessage.fromObject(object.chatMessages[i]);\n            }\n        }\n        if (object.endTimestamp != null)\n            message.endTimestamp = object.endTimestamp >>> 0;\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a State message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof State\n     * @static\n     * @param {State} message State\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    State.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults)\n            object.chatMessages = [];\n        if (options.objects || options.defaults)\n            object.participants = {};\n        if (options.defaults) {\n            object.roomId = \"\";\n            object.host = \"\";\n            object.content = null;\n            object.endTimestamp = 0;\n        }\n        if (message.roomId != null && message.hasOwnProperty(\"roomId\"))\n            object.roomId = message.roomId;\n        var keys2;\n        if (message.participants && (keys2 = Object.keys(message.participants)).length) {\n            object.participants = {};\n            for (var j = 0; j < keys2.length; ++j)\n                object.participants[keys2[j]] = $root.Participant.toObject(message.participants[keys2[j]], options);\n        }\n        if (message.host != null && message.hasOwnProperty(\"host\"))\n            object.host = message.host;\n        if (message.content != null && message.hasOwnProperty(\"content\"))\n            object.content = $root.Content.toObject(message.content, options);\n        if (message.chatMessages && message.chatMessages.length) {\n            object.chatMessages = [];\n            for (var j = 0; j < message.chatMessages.length; ++j)\n                object.chatMessages[j] = $root.ChatMessage.toObject(message.chatMessages[j], options);\n        }\n        if (message.endTimestamp != null && message.hasOwnProperty(\"endTimestamp\"))\n            object.endTimestamp = message.endTimestamp;\n        return object;\n    };\n\n    /**\n     * Converts this State to JSON.\n     * @function toJSON\n     * @memberof State\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    State.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return State;\n})();\n\n$root.AddParticipants = (function() {\n\n    /**\n     * Properties of an AddParticipants.\n     * @exports IAddParticipants\n     * @interface IAddParticipants\n     * @property {Object.<string,IParticipant>|null} [participants] AddParticipants participants\n     */\n\n    /**\n     * Constructs a new AddParticipants.\n     * @exports AddParticipants\n     * @classdesc Represents an AddParticipants.\n     * @implements IAddParticipants\n     * @constructor\n     * @param {IAddParticipants=} [properties] Properties to set\n     */\n    function AddParticipants(properties) {\n        this.participants = {};\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * AddParticipants participants.\n     * @member {Object.<string,IParticipant>} participants\n     * @memberof AddParticipants\n     * @instance\n     */\n    AddParticipants.prototype.participants = $util.emptyObject;\n\n    /**\n     * Creates a new AddParticipants instance using the specified properties.\n     * @function create\n     * @memberof AddParticipants\n     * @static\n     * @param {IAddParticipants=} [properties] Properties to set\n     * @returns {AddParticipants} AddParticipants instance\n     */\n    AddParticipants.create = function create(properties) {\n        return new AddParticipants(properties);\n    };\n\n    /**\n     * Encodes the specified AddParticipants message. Does not implicitly {@link AddParticipants.verify|verify} messages.\n     * @function encode\n     * @memberof AddParticipants\n     * @static\n     * @param {IAddParticipants} message AddParticipants message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    AddParticipants.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.participants != null && Object.hasOwnProperty.call(message, \"participants\"))\n            for (var keys = Object.keys(message.participants), i = 0; i < keys.length; ++i) {\n                writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                $root.Participant.encode(message.participants[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n            }\n        return writer;\n    };\n\n    /**\n     * Encodes the specified AddParticipants message, length delimited. Does not implicitly {@link AddParticipants.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof AddParticipants\n     * @static\n     * @param {IAddParticipants} message AddParticipants message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    AddParticipants.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes an AddParticipants message from the specified reader or buffer.\n     * @function decode\n     * @memberof AddParticipants\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {AddParticipants} AddParticipants\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    AddParticipants.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.AddParticipants(), key;\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                reader.skip().pos++;\n                if (message.participants === $util.emptyObject)\n                    message.participants = {};\n                key = reader.string();\n                reader.pos++;\n                message.participants[key] = $root.Participant.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes an AddParticipants message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof AddParticipants\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {AddParticipants} AddParticipants\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    AddParticipants.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies an AddParticipants message.\n     * @function verify\n     * @memberof AddParticipants\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    AddParticipants.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.participants != null && message.hasOwnProperty(\"participants\")) {\n            if (!$util.isObject(message.participants))\n                return \"participants: object expected\";\n            var key = Object.keys(message.participants);\n            for (var i = 0; i < key.length; ++i) {\n                var error = $root.Participant.verify(message.participants[key[i]]);\n                if (error)\n                    return \"participants.\" + error;\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Creates an AddParticipants message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof AddParticipants\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {AddParticipants} AddParticipants\n     */\n    AddParticipants.fromObject = function fromObject(object) {\n        if (object instanceof $root.AddParticipants)\n            return object;\n        var message = new $root.AddParticipants();\n        if (object.participants) {\n            if (typeof object.participants !== \"object\")\n                throw TypeError(\".AddParticipants.participants: object expected\");\n            message.participants = {};\n            for (var keys = Object.keys(object.participants), i = 0; i < keys.length; ++i) {\n                if (typeof object.participants[keys[i]] !== \"object\")\n                    throw TypeError(\".AddParticipants.participants: object expected\");\n                message.participants[keys[i]] = $root.Participant.fromObject(object.participants[keys[i]]);\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from an AddParticipants message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof AddParticipants\n     * @static\n     * @param {AddParticipants} message AddParticipants\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    AddParticipants.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.objects || options.defaults)\n            object.participants = {};\n        var keys2;\n        if (message.participants && (keys2 = Object.keys(message.participants)).length) {\n            object.participants = {};\n            for (var j = 0; j < keys2.length; ++j)\n                object.participants[keys2[j]] = $root.Participant.toObject(message.participants[keys2[j]], options);\n        }\n        return object;\n    };\n\n    /**\n     * Converts this AddParticipants to JSON.\n     * @function toJSON\n     * @memberof AddParticipants\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    AddParticipants.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return AddParticipants;\n})();\n\n$root.RemoveParticipants = (function() {\n\n    /**\n     * Properties of a RemoveParticipants.\n     * @exports IRemoveParticipants\n     * @interface IRemoveParticipants\n     * @property {Array.<string>|null} [participants] RemoveParticipants participants\n     */\n\n    /**\n     * Constructs a new RemoveParticipants.\n     * @exports RemoveParticipants\n     * @classdesc Represents a RemoveParticipants.\n     * @implements IRemoveParticipants\n     * @constructor\n     * @param {IRemoveParticipants=} [properties] Properties to set\n     */\n    function RemoveParticipants(properties) {\n        this.participants = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * RemoveParticipants participants.\n     * @member {Array.<string>} participants\n     * @memberof RemoveParticipants\n     * @instance\n     */\n    RemoveParticipants.prototype.participants = $util.emptyArray;\n\n    /**\n     * Creates a new RemoveParticipants instance using the specified properties.\n     * @function create\n     * @memberof RemoveParticipants\n     * @static\n     * @param {IRemoveParticipants=} [properties] Properties to set\n     * @returns {RemoveParticipants} RemoveParticipants instance\n     */\n    RemoveParticipants.create = function create(properties) {\n        return new RemoveParticipants(properties);\n    };\n\n    /**\n     * Encodes the specified RemoveParticipants message. Does not implicitly {@link RemoveParticipants.verify|verify} messages.\n     * @function encode\n     * @memberof RemoveParticipants\n     * @static\n     * @param {IRemoveParticipants} message RemoveParticipants message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    RemoveParticipants.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.participants != null && message.participants.length)\n            for (var i = 0; i < message.participants.length; ++i)\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.participants[i]);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified RemoveParticipants message, length delimited. Does not implicitly {@link RemoveParticipants.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof RemoveParticipants\n     * @static\n     * @param {IRemoveParticipants} message RemoveParticipants message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    RemoveParticipants.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a RemoveParticipants message from the specified reader or buffer.\n     * @function decode\n     * @memberof RemoveParticipants\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {RemoveParticipants} RemoveParticipants\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    RemoveParticipants.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RemoveParticipants();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                if (!(message.participants && message.participants.length))\n                    message.participants = [];\n                message.participants.push(reader.string());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a RemoveParticipants message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof RemoveParticipants\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {RemoveParticipants} RemoveParticipants\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    RemoveParticipants.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a RemoveParticipants message.\n     * @function verify\n     * @memberof RemoveParticipants\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    RemoveParticipants.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.participants != null && message.hasOwnProperty(\"participants\")) {\n            if (!Array.isArray(message.participants))\n                return \"participants: array expected\";\n            for (var i = 0; i < message.participants.length; ++i)\n                if (!$util.isString(message.participants[i]))\n                    return \"participants: string[] expected\";\n        }\n        return null;\n    };\n\n    /**\n     * Creates a RemoveParticipants message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof RemoveParticipants\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {RemoveParticipants} RemoveParticipants\n     */\n    RemoveParticipants.fromObject = function fromObject(object) {\n        if (object instanceof $root.RemoveParticipants)\n            return object;\n        var message = new $root.RemoveParticipants();\n        if (object.participants) {\n            if (!Array.isArray(object.participants))\n                throw TypeError(\".RemoveParticipants.participants: array expected\");\n            message.participants = [];\n            for (var i = 0; i < object.participants.length; ++i)\n                message.participants[i] = String(object.participants[i]);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a RemoveParticipants message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof RemoveParticipants\n     * @static\n     * @param {RemoveParticipants} message RemoveParticipants\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    RemoveParticipants.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults)\n            object.participants = [];\n        if (message.participants && message.participants.length) {\n            object.participants = [];\n            for (var j = 0; j < message.participants.length; ++j)\n                object.participants[j] = message.participants[j];\n        }\n        return object;\n    };\n\n    /**\n     * Converts this RemoveParticipants to JSON.\n     * @function toJSON\n     * @memberof RemoveParticipants\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    RemoveParticipants.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return RemoveParticipants;\n})();\n\n$root.ChangeContent = (function() {\n\n    /**\n     * Properties of a ChangeContent.\n     * @exports IChangeContent\n     * @interface IChangeContent\n     * @property {IContent|null} [content] ChangeContent content\n     */\n\n    /**\n     * Constructs a new ChangeContent.\n     * @exports ChangeContent\n     * @classdesc Represents a ChangeContent.\n     * @implements IChangeContent\n     * @constructor\n     * @param {IChangeContent=} [properties] Properties to set\n     */\n    function ChangeContent(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ChangeContent content.\n     * @member {IContent|null|undefined} content\n     * @memberof ChangeContent\n     * @instance\n     */\n    ChangeContent.prototype.content = null;\n\n    /**\n     * Creates a new ChangeContent instance using the specified properties.\n     * @function create\n     * @memberof ChangeContent\n     * @static\n     * @param {IChangeContent=} [properties] Properties to set\n     * @returns {ChangeContent} ChangeContent instance\n     */\n    ChangeContent.create = function create(properties) {\n        return new ChangeContent(properties);\n    };\n\n    /**\n     * Encodes the specified ChangeContent message. Does not implicitly {@link ChangeContent.verify|verify} messages.\n     * @function encode\n     * @memberof ChangeContent\n     * @static\n     * @param {IChangeContent} message ChangeContent message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ChangeContent.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.content != null && Object.hasOwnProperty.call(message, \"content\"))\n            $root.Content.encode(message.content, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ChangeContent message, length delimited. Does not implicitly {@link ChangeContent.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ChangeContent\n     * @static\n     * @param {IChangeContent} message ChangeContent message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ChangeContent.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ChangeContent message from the specified reader or buffer.\n     * @function decode\n     * @memberof ChangeContent\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ChangeContent} ChangeContent\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ChangeContent.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ChangeContent();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.content = $root.Content.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ChangeContent message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ChangeContent\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ChangeContent} ChangeContent\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ChangeContent.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ChangeContent message.\n     * @function verify\n     * @memberof ChangeContent\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ChangeContent.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.content != null && message.hasOwnProperty(\"content\")) {\n            var error = $root.Content.verify(message.content);\n            if (error)\n                return \"content.\" + error;\n        }\n        return null;\n    };\n\n    /**\n     * Creates a ChangeContent message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ChangeContent\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ChangeContent} ChangeContent\n     */\n    ChangeContent.fromObject = function fromObject(object) {\n        if (object instanceof $root.ChangeContent)\n            return object;\n        var message = new $root.ChangeContent();\n        if (object.content != null) {\n            if (typeof object.content !== \"object\")\n                throw TypeError(\".ChangeContent.content: object expected\");\n            message.content = $root.Content.fromObject(object.content);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a ChangeContent message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ChangeContent\n     * @static\n     * @param {ChangeContent} message ChangeContent\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ChangeContent.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults)\n            object.content = null;\n        if (message.content != null && message.hasOwnProperty(\"content\"))\n            object.content = $root.Content.toObject(message.content, options);\n        return object;\n    };\n\n    /**\n     * Converts this ChangeContent to JSON.\n     * @function toJSON\n     * @memberof ChangeContent\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ChangeContent.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ChangeContent;\n})();\n\n$root.ChangeHost = (function() {\n\n    /**\n     * Properties of a ChangeHost.\n     * @exports IChangeHost\n     * @interface IChangeHost\n     * @property {string|null} [hostId] ChangeHost hostId\n     */\n\n    /**\n     * Constructs a new ChangeHost.\n     * @exports ChangeHost\n     * @classdesc Represents a ChangeHost.\n     * @implements IChangeHost\n     * @constructor\n     * @param {IChangeHost=} [properties] Properties to set\n     */\n    function ChangeHost(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ChangeHost hostId.\n     * @member {string} hostId\n     * @memberof ChangeHost\n     * @instance\n     */\n    ChangeHost.prototype.hostId = \"\";\n\n    /**\n     * Creates a new ChangeHost instance using the specified properties.\n     * @function create\n     * @memberof ChangeHost\n     * @static\n     * @param {IChangeHost=} [properties] Properties to set\n     * @returns {ChangeHost} ChangeHost instance\n     */\n    ChangeHost.create = function create(properties) {\n        return new ChangeHost(properties);\n    };\n\n    /**\n     * Encodes the specified ChangeHost message. Does not implicitly {@link ChangeHost.verify|verify} messages.\n     * @function encode\n     * @memberof ChangeHost\n     * @static\n     * @param {IChangeHost} message ChangeHost message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ChangeHost.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.hostId != null && Object.hasOwnProperty.call(message, \"hostId\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.hostId);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ChangeHost message, length delimited. Does not implicitly {@link ChangeHost.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ChangeHost\n     * @static\n     * @param {IChangeHost} message ChangeHost message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ChangeHost.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ChangeHost message from the specified reader or buffer.\n     * @function decode\n     * @memberof ChangeHost\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ChangeHost} ChangeHost\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ChangeHost.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ChangeHost();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.hostId = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ChangeHost message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ChangeHost\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ChangeHost} ChangeHost\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ChangeHost.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ChangeHost message.\n     * @function verify\n     * @memberof ChangeHost\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ChangeHost.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.hostId != null && message.hasOwnProperty(\"hostId\"))\n            if (!$util.isString(message.hostId))\n                return \"hostId: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a ChangeHost message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ChangeHost\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ChangeHost} ChangeHost\n     */\n    ChangeHost.fromObject = function fromObject(object) {\n        if (object instanceof $root.ChangeHost)\n            return object;\n        var message = new $root.ChangeHost();\n        if (object.hostId != null)\n            message.hostId = String(object.hostId);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a ChangeHost message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ChangeHost\n     * @static\n     * @param {ChangeHost} message ChangeHost\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ChangeHost.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults)\n            object.hostId = \"\";\n        if (message.hostId != null && message.hasOwnProperty(\"hostId\"))\n            object.hostId = message.hostId;\n        return object;\n    };\n\n    /**\n     * Converts this ChangeHost to JSON.\n     * @function toJSON\n     * @memberof ChangeHost\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ChangeHost.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ChangeHost;\n})();\n\n$root.AppendChatMessage = (function() {\n\n    /**\n     * Properties of an AppendChatMessage.\n     * @exports IAppendChatMessage\n     * @interface IAppendChatMessage\n     * @property {Array.<IChatMessage>|null} [messages] AppendChatMessage messages\n     */\n\n    /**\n     * Constructs a new AppendChatMessage.\n     * @exports AppendChatMessage\n     * @classdesc Represents an AppendChatMessage.\n     * @implements IAppendChatMessage\n     * @constructor\n     * @param {IAppendChatMessage=} [properties] Properties to set\n     */\n    function AppendChatMessage(properties) {\n        this.messages = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * AppendChatMessage messages.\n     * @member {Array.<IChatMessage>} messages\n     * @memberof AppendChatMessage\n     * @instance\n     */\n    AppendChatMessage.prototype.messages = $util.emptyArray;\n\n    /**\n     * Creates a new AppendChatMessage instance using the specified properties.\n     * @function create\n     * @memberof AppendChatMessage\n     * @static\n     * @param {IAppendChatMessage=} [properties] Properties to set\n     * @returns {AppendChatMessage} AppendChatMessage instance\n     */\n    AppendChatMessage.create = function create(properties) {\n        return new AppendChatMessage(properties);\n    };\n\n    /**\n     * Encodes the specified AppendChatMessage message. Does not implicitly {@link AppendChatMessage.verify|verify} messages.\n     * @function encode\n     * @memberof AppendChatMessage\n     * @static\n     * @param {IAppendChatMessage} message AppendChatMessage message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    AppendChatMessage.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.messages != null && message.messages.length)\n            for (var i = 0; i < message.messages.length; ++i)\n                $root.ChatMessage.encode(message.messages[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified AppendChatMessage message, length delimited. Does not implicitly {@link AppendChatMessage.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof AppendChatMessage\n     * @static\n     * @param {IAppendChatMessage} message AppendChatMessage message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    AppendChatMessage.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes an AppendChatMessage message from the specified reader or buffer.\n     * @function decode\n     * @memberof AppendChatMessage\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {AppendChatMessage} AppendChatMessage\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    AppendChatMessage.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.AppendChatMessage();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                if (!(message.messages && message.messages.length))\n                    message.messages = [];\n                message.messages.push($root.ChatMessage.decode(reader, reader.uint32()));\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes an AppendChatMessage message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof AppendChatMessage\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {AppendChatMessage} AppendChatMessage\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    AppendChatMessage.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies an AppendChatMessage message.\n     * @function verify\n     * @memberof AppendChatMessage\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    AppendChatMessage.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.messages != null && message.hasOwnProperty(\"messages\")) {\n            if (!Array.isArray(message.messages))\n                return \"messages: array expected\";\n            for (var i = 0; i < message.messages.length; ++i) {\n                var error = $root.ChatMessage.verify(message.messages[i]);\n                if (error)\n                    return \"messages.\" + error;\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Creates an AppendChatMessage message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof AppendChatMessage\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {AppendChatMessage} AppendChatMessage\n     */\n    AppendChatMessage.fromObject = function fromObject(object) {\n        if (object instanceof $root.AppendChatMessage)\n            return object;\n        var message = new $root.AppendChatMessage();\n        if (object.messages) {\n            if (!Array.isArray(object.messages))\n                throw TypeError(\".AppendChatMessage.messages: array expected\");\n            message.messages = [];\n            for (var i = 0; i < object.messages.length; ++i) {\n                if (typeof object.messages[i] !== \"object\")\n                    throw TypeError(\".AppendChatMessage.messages: object expected\");\n                message.messages[i] = $root.ChatMessage.fromObject(object.messages[i]);\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from an AppendChatMessage message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof AppendChatMessage\n     * @static\n     * @param {AppendChatMessage} message AppendChatMessage\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    AppendChatMessage.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults)\n            object.messages = [];\n        if (message.messages && message.messages.length) {\n            object.messages = [];\n            for (var j = 0; j < message.messages.length; ++j)\n                object.messages[j] = $root.ChatMessage.toObject(message.messages[j], options);\n        }\n        return object;\n    };\n\n    /**\n     * Converts this AppendChatMessage to JSON.\n     * @function toJSON\n     * @memberof AppendChatMessage\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    AppendChatMessage.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return AppendChatMessage;\n})();\n\n$root.ReceiveTrophy = (function() {\n\n    /**\n     * Properties of a ReceiveTrophy.\n     * @exports IReceiveTrophy\n     * @interface IReceiveTrophy\n     * @property {ITrophy|null} [trophy] ReceiveTrophy trophy\n     */\n\n    /**\n     * Constructs a new ReceiveTrophy.\n     * @exports ReceiveTrophy\n     * @classdesc Represents a ReceiveTrophy.\n     * @implements IReceiveTrophy\n     * @constructor\n     * @param {IReceiveTrophy=} [properties] Properties to set\n     */\n    function ReceiveTrophy(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ReceiveTrophy trophy.\n     * @member {ITrophy|null|undefined} trophy\n     * @memberof ReceiveTrophy\n     * @instance\n     */\n    ReceiveTrophy.prototype.trophy = null;\n\n    /**\n     * Creates a new ReceiveTrophy instance using the specified properties.\n     * @function create\n     * @memberof ReceiveTrophy\n     * @static\n     * @param {IReceiveTrophy=} [properties] Properties to set\n     * @returns {ReceiveTrophy} ReceiveTrophy instance\n     */\n    ReceiveTrophy.create = function create(properties) {\n        return new ReceiveTrophy(properties);\n    };\n\n    /**\n     * Encodes the specified ReceiveTrophy message. Does not implicitly {@link ReceiveTrophy.verify|verify} messages.\n     * @function encode\n     * @memberof ReceiveTrophy\n     * @static\n     * @param {IReceiveTrophy} message ReceiveTrophy message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ReceiveTrophy.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.trophy != null && Object.hasOwnProperty.call(message, \"trophy\"))\n            $root.Trophy.encode(message.trophy, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ReceiveTrophy message, length delimited. Does not implicitly {@link ReceiveTrophy.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ReceiveTrophy\n     * @static\n     * @param {IReceiveTrophy} message ReceiveTrophy message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ReceiveTrophy.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ReceiveTrophy message from the specified reader or buffer.\n     * @function decode\n     * @memberof ReceiveTrophy\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ReceiveTrophy} ReceiveTrophy\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ReceiveTrophy.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ReceiveTrophy();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.trophy = $root.Trophy.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ReceiveTrophy message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ReceiveTrophy\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ReceiveTrophy} ReceiveTrophy\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ReceiveTrophy.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ReceiveTrophy message.\n     * @function verify\n     * @memberof ReceiveTrophy\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ReceiveTrophy.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.trophy != null && message.hasOwnProperty(\"trophy\")) {\n            var error = $root.Trophy.verify(message.trophy);\n            if (error)\n                return \"trophy.\" + error;\n        }\n        return null;\n    };\n\n    /**\n     * Creates a ReceiveTrophy message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ReceiveTrophy\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ReceiveTrophy} ReceiveTrophy\n     */\n    ReceiveTrophy.fromObject = function fromObject(object) {\n        if (object instanceof $root.ReceiveTrophy)\n            return object;\n        var message = new $root.ReceiveTrophy();\n        if (object.trophy != null) {\n            if (typeof object.trophy !== \"object\")\n                throw TypeError(\".ReceiveTrophy.trophy: object expected\");\n            message.trophy = $root.Trophy.fromObject(object.trophy);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a ReceiveTrophy message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ReceiveTrophy\n     * @static\n     * @param {ReceiveTrophy} message ReceiveTrophy\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ReceiveTrophy.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults)\n            object.trophy = null;\n        if (message.trophy != null && message.hasOwnProperty(\"trophy\"))\n            object.trophy = $root.Trophy.toObject(message.trophy, options);\n        return object;\n    };\n\n    /**\n     * Converts this ReceiveTrophy to JSON.\n     * @function toJSON\n     * @memberof ReceiveTrophy\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ReceiveTrophy.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ReceiveTrophy;\n})();\n\n$root.ClassEnded = (function() {\n\n    /**\n     * Properties of a ClassEnded.\n     * @exports IClassEnded\n     * @interface IClassEnded\n     */\n\n    /**\n     * Constructs a new ClassEnded.\n     * @exports ClassEnded\n     * @classdesc Represents a ClassEnded.\n     * @implements IClassEnded\n     * @constructor\n     * @param {IClassEnded=} [properties] Properties to set\n     */\n    function ClassEnded(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Creates a new ClassEnded instance using the specified properties.\n     * @function create\n     * @memberof ClassEnded\n     * @static\n     * @param {IClassEnded=} [properties] Properties to set\n     * @returns {ClassEnded} ClassEnded instance\n     */\n    ClassEnded.create = function create(properties) {\n        return new ClassEnded(properties);\n    };\n\n    /**\n     * Encodes the specified ClassEnded message. Does not implicitly {@link ClassEnded.verify|verify} messages.\n     * @function encode\n     * @memberof ClassEnded\n     * @static\n     * @param {IClassEnded} message ClassEnded message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ClassEnded.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ClassEnded message, length delimited. Does not implicitly {@link ClassEnded.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ClassEnded\n     * @static\n     * @param {IClassEnded} message ClassEnded message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ClassEnded.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ClassEnded message from the specified reader or buffer.\n     * @function decode\n     * @memberof ClassEnded\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ClassEnded} ClassEnded\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ClassEnded.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ClassEnded();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ClassEnded message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ClassEnded\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ClassEnded} ClassEnded\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ClassEnded.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ClassEnded message.\n     * @function verify\n     * @memberof ClassEnded\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ClassEnded.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        return null;\n    };\n\n    /**\n     * Creates a ClassEnded message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ClassEnded\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ClassEnded} ClassEnded\n     */\n    ClassEnded.fromObject = function fromObject(object) {\n        if (object instanceof $root.ClassEnded)\n            return object;\n        return new $root.ClassEnded();\n    };\n\n    /**\n     * Creates a plain object from a ClassEnded message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ClassEnded\n     * @static\n     * @param {ClassEnded} message ClassEnded\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ClassEnded.toObject = function toObject() {\n        return {};\n    };\n\n    /**\n     * Converts this ClassEnded to JSON.\n     * @function toJSON\n     * @memberof ClassEnded\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ClassEnded.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ClassEnded;\n})();\n\n$root.Device = (function() {\n\n    /**\n     * Properties of a Device.\n     * @exports IDevice\n     * @interface IDevice\n     * @property {IActivity|null} [activity] Device activity\n     * @property {Array.<IWebRTCStream>|null} [webRTCStreams] Device webRTCStreams\n     */\n\n    /**\n     * Constructs a new Device.\n     * @exports Device\n     * @classdesc Represents a Device.\n     * @implements IDevice\n     * @constructor\n     * @param {IDevice=} [properties] Properties to set\n     */\n    function Device(properties) {\n        this.webRTCStreams = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Device activity.\n     * @member {IActivity|null|undefined} activity\n     * @memberof Device\n     * @instance\n     */\n    Device.prototype.activity = null;\n\n    /**\n     * Device webRTCStreams.\n     * @member {Array.<IWebRTCStream>} webRTCStreams\n     * @memberof Device\n     * @instance\n     */\n    Device.prototype.webRTCStreams = $util.emptyArray;\n\n    /**\n     * Creates a new Device instance using the specified properties.\n     * @function create\n     * @memberof Device\n     * @static\n     * @param {IDevice=} [properties] Properties to set\n     * @returns {Device} Device instance\n     */\n    Device.create = function create(properties) {\n        return new Device(properties);\n    };\n\n    /**\n     * Encodes the specified Device message. Does not implicitly {@link Device.verify|verify} messages.\n     * @function encode\n     * @memberof Device\n     * @static\n     * @param {IDevice} message Device message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Device.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.activity != null && Object.hasOwnProperty.call(message, \"activity\"))\n            $root.Activity.encode(message.activity, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.webRTCStreams != null && message.webRTCStreams.length)\n            for (var i = 0; i < message.webRTCStreams.length; ++i)\n                $root.WebRTCStream.encode(message.webRTCStreams[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified Device message, length delimited. Does not implicitly {@link Device.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Device\n     * @static\n     * @param {IDevice} message Device message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Device.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a Device message from the specified reader or buffer.\n     * @function decode\n     * @memberof Device\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Device} Device\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Device.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Device();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.activity = $root.Activity.decode(reader, reader.uint32());\n                break;\n            case 2:\n                if (!(message.webRTCStreams && message.webRTCStreams.length))\n                    message.webRTCStreams = [];\n                message.webRTCStreams.push($root.WebRTCStream.decode(reader, reader.uint32()));\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a Device message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Device\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Device} Device\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Device.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a Device message.\n     * @function verify\n     * @memberof Device\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    Device.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.activity != null && message.hasOwnProperty(\"activity\")) {\n            var error = $root.Activity.verify(message.activity);\n            if (error)\n                return \"activity.\" + error;\n        }\n        if (message.webRTCStreams != null && message.hasOwnProperty(\"webRTCStreams\")) {\n            if (!Array.isArray(message.webRTCStreams))\n                return \"webRTCStreams: array expected\";\n            for (var i = 0; i < message.webRTCStreams.length; ++i) {\n                var error = $root.WebRTCStream.verify(message.webRTCStreams[i]);\n                if (error)\n                    return \"webRTCStreams.\" + error;\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Creates a Device message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Device\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {Device} Device\n     */\n    Device.fromObject = function fromObject(object) {\n        if (object instanceof $root.Device)\n            return object;\n        var message = new $root.Device();\n        if (object.activity != null) {\n            if (typeof object.activity !== \"object\")\n                throw TypeError(\".Device.activity: object expected\");\n            message.activity = $root.Activity.fromObject(object.activity);\n        }\n        if (object.webRTCStreams) {\n            if (!Array.isArray(object.webRTCStreams))\n                throw TypeError(\".Device.webRTCStreams: array expected\");\n            message.webRTCStreams = [];\n            for (var i = 0; i < object.webRTCStreams.length; ++i) {\n                if (typeof object.webRTCStreams[i] !== \"object\")\n                    throw TypeError(\".Device.webRTCStreams: object expected\");\n                message.webRTCStreams[i] = $root.WebRTCStream.fromObject(object.webRTCStreams[i]);\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a Device message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Device\n     * @static\n     * @param {Device} message Device\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Device.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults)\n            object.webRTCStreams = [];\n        if (options.defaults)\n            object.activity = null;\n        if (message.activity != null && message.hasOwnProperty(\"activity\"))\n            object.activity = $root.Activity.toObject(message.activity, options);\n        if (message.webRTCStreams && message.webRTCStreams.length) {\n            object.webRTCStreams = [];\n            for (var j = 0; j < message.webRTCStreams.length; ++j)\n                object.webRTCStreams[j] = $root.WebRTCStream.toObject(message.webRTCStreams[j], options);\n        }\n        return object;\n    };\n\n    /**\n     * Converts this Device to JSON.\n     * @function toJSON\n     * @memberof Device\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Device.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Device;\n})();\n\n$root.Activity = (function() {\n\n    /**\n     * Properties of an Activity.\n     * @exports IActivity\n     * @interface IActivity\n     * @property {string|null} [id] Activity id\n     * @property {string|null} [streamId] Activity streamId\n     */\n\n    /**\n     * Constructs a new Activity.\n     * @exports Activity\n     * @classdesc Represents an Activity.\n     * @implements IActivity\n     * @constructor\n     * @param {IActivity=} [properties] Properties to set\n     */\n    function Activity(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Activity id.\n     * @member {string} id\n     * @memberof Activity\n     * @instance\n     */\n    Activity.prototype.id = \"\";\n\n    /**\n     * Activity streamId.\n     * @member {string} streamId\n     * @memberof Activity\n     * @instance\n     */\n    Activity.prototype.streamId = \"\";\n\n    /**\n     * Creates a new Activity instance using the specified properties.\n     * @function create\n     * @memberof Activity\n     * @static\n     * @param {IActivity=} [properties] Properties to set\n     * @returns {Activity} Activity instance\n     */\n    Activity.create = function create(properties) {\n        return new Activity(properties);\n    };\n\n    /**\n     * Encodes the specified Activity message. Does not implicitly {@link Activity.verify|verify} messages.\n     * @function encode\n     * @memberof Activity\n     * @static\n     * @param {IActivity} message Activity message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Activity.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.id != null && Object.hasOwnProperty.call(message, \"id\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);\n        if (message.streamId != null && Object.hasOwnProperty.call(message, \"streamId\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.streamId);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified Activity message, length delimited. Does not implicitly {@link Activity.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Activity\n     * @static\n     * @param {IActivity} message Activity message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Activity.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes an Activity message from the specified reader or buffer.\n     * @function decode\n     * @memberof Activity\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Activity} Activity\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Activity.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Activity();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.id = reader.string();\n                break;\n            case 2:\n                message.streamId = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes an Activity message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Activity\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Activity} Activity\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Activity.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies an Activity message.\n     * @function verify\n     * @memberof Activity\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    Activity.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.id != null && message.hasOwnProperty(\"id\"))\n            if (!$util.isString(message.id))\n                return \"id: string expected\";\n        if (message.streamId != null && message.hasOwnProperty(\"streamId\"))\n            if (!$util.isString(message.streamId))\n                return \"streamId: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates an Activity message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Activity\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {Activity} Activity\n     */\n    Activity.fromObject = function fromObject(object) {\n        if (object instanceof $root.Activity)\n            return object;\n        var message = new $root.Activity();\n        if (object.id != null)\n            message.id = String(object.id);\n        if (object.streamId != null)\n            message.streamId = String(object.streamId);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from an Activity message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Activity\n     * @static\n     * @param {Activity} message Activity\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Activity.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.id = \"\";\n            object.streamId = \"\";\n        }\n        if (message.id != null && message.hasOwnProperty(\"id\"))\n            object.id = message.id;\n        if (message.streamId != null && message.hasOwnProperty(\"streamId\"))\n            object.streamId = message.streamId;\n        return object;\n    };\n\n    /**\n     * Converts this Activity to JSON.\n     * @function toJSON\n     * @memberof Activity\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Activity.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Activity;\n})();\n\n$root.WebRTCStream = (function() {\n\n    /**\n     * Properties of a WebRTCStream.\n     * @exports IWebRTCStream\n     * @interface IWebRTCStream\n     * @property {string|null} [id] WebRTCStream id\n     * @property {string|null} [label] WebRTCStream label\n     * @property {Array.<IWebRTCTrack>|null} [tracks] WebRTCStream tracks\n     */\n\n    /**\n     * Constructs a new WebRTCStream.\n     * @exports WebRTCStream\n     * @classdesc Represents a WebRTCStream.\n     * @implements IWebRTCStream\n     * @constructor\n     * @param {IWebRTCStream=} [properties] Properties to set\n     */\n    function WebRTCStream(properties) {\n        this.tracks = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * WebRTCStream id.\n     * @member {string} id\n     * @memberof WebRTCStream\n     * @instance\n     */\n    WebRTCStream.prototype.id = \"\";\n\n    /**\n     * WebRTCStream label.\n     * @member {string} label\n     * @memberof WebRTCStream\n     * @instance\n     */\n    WebRTCStream.prototype.label = \"\";\n\n    /**\n     * WebRTCStream tracks.\n     * @member {Array.<IWebRTCTrack>} tracks\n     * @memberof WebRTCStream\n     * @instance\n     */\n    WebRTCStream.prototype.tracks = $util.emptyArray;\n\n    /**\n     * Creates a new WebRTCStream instance using the specified properties.\n     * @function create\n     * @memberof WebRTCStream\n     * @static\n     * @param {IWebRTCStream=} [properties] Properties to set\n     * @returns {WebRTCStream} WebRTCStream instance\n     */\n    WebRTCStream.create = function create(properties) {\n        return new WebRTCStream(properties);\n    };\n\n    /**\n     * Encodes the specified WebRTCStream message. Does not implicitly {@link WebRTCStream.verify|verify} messages.\n     * @function encode\n     * @memberof WebRTCStream\n     * @static\n     * @param {IWebRTCStream} message WebRTCStream message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    WebRTCStream.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.id != null && Object.hasOwnProperty.call(message, \"id\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);\n        if (message.label != null && Object.hasOwnProperty.call(message, \"label\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.label);\n        if (message.tracks != null && message.tracks.length)\n            for (var i = 0; i < message.tracks.length; ++i)\n                $root.WebRTCTrack.encode(message.tracks[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified WebRTCStream message, length delimited. Does not implicitly {@link WebRTCStream.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof WebRTCStream\n     * @static\n     * @param {IWebRTCStream} message WebRTCStream message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    WebRTCStream.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a WebRTCStream message from the specified reader or buffer.\n     * @function decode\n     * @memberof WebRTCStream\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {WebRTCStream} WebRTCStream\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    WebRTCStream.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WebRTCStream();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.id = reader.string();\n                break;\n            case 2:\n                message.label = reader.string();\n                break;\n            case 3:\n                if (!(message.tracks && message.tracks.length))\n                    message.tracks = [];\n                message.tracks.push($root.WebRTCTrack.decode(reader, reader.uint32()));\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a WebRTCStream message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof WebRTCStream\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {WebRTCStream} WebRTCStream\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    WebRTCStream.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a WebRTCStream message.\n     * @function verify\n     * @memberof WebRTCStream\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    WebRTCStream.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.id != null && message.hasOwnProperty(\"id\"))\n            if (!$util.isString(message.id))\n                return \"id: string expected\";\n        if (message.label != null && message.hasOwnProperty(\"label\"))\n            if (!$util.isString(message.label))\n                return \"label: string expected\";\n        if (message.tracks != null && message.hasOwnProperty(\"tracks\")) {\n            if (!Array.isArray(message.tracks))\n                return \"tracks: array expected\";\n            for (var i = 0; i < message.tracks.length; ++i) {\n                var error = $root.WebRTCTrack.verify(message.tracks[i]);\n                if (error)\n                    return \"tracks.\" + error;\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Creates a WebRTCStream message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof WebRTCStream\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {WebRTCStream} WebRTCStream\n     */\n    WebRTCStream.fromObject = function fromObject(object) {\n        if (object instanceof $root.WebRTCStream)\n            return object;\n        var message = new $root.WebRTCStream();\n        if (object.id != null)\n            message.id = String(object.id);\n        if (object.label != null)\n            message.label = String(object.label);\n        if (object.tracks) {\n            if (!Array.isArray(object.tracks))\n                throw TypeError(\".WebRTCStream.tracks: array expected\");\n            message.tracks = [];\n            for (var i = 0; i < object.tracks.length; ++i) {\n                if (typeof object.tracks[i] !== \"object\")\n                    throw TypeError(\".WebRTCStream.tracks: object expected\");\n                message.tracks[i] = $root.WebRTCTrack.fromObject(object.tracks[i]);\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a WebRTCStream message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof WebRTCStream\n     * @static\n     * @param {WebRTCStream} message WebRTCStream\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    WebRTCStream.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults)\n            object.tracks = [];\n        if (options.defaults) {\n            object.id = \"\";\n            object.label = \"\";\n        }\n        if (message.id != null && message.hasOwnProperty(\"id\"))\n            object.id = message.id;\n        if (message.label != null && message.hasOwnProperty(\"label\"))\n            object.label = message.label;\n        if (message.tracks && message.tracks.length) {\n            object.tracks = [];\n            for (var j = 0; j < message.tracks.length; ++j)\n                object.tracks[j] = $root.WebRTCTrack.toObject(message.tracks[j], options);\n        }\n        return object;\n    };\n\n    /**\n     * Converts this WebRTCStream to JSON.\n     * @function toJSON\n     * @memberof WebRTCStream\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    WebRTCStream.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return WebRTCStream;\n})();\n\n$root.WebRTCTrack = (function() {\n\n    /**\n     * Properties of a WebRTCTrack.\n     * @exports IWebRTCTrack\n     * @interface IWebRTCTrack\n     * @property {string|null} [id] WebRTCTrack id\n     * @property {string|null} [sfu] WebRTCTrack sfu\n     */\n\n    /**\n     * Constructs a new WebRTCTrack.\n     * @exports WebRTCTrack\n     * @classdesc Represents a WebRTCTrack.\n     * @implements IWebRTCTrack\n     * @constructor\n     * @param {IWebRTCTrack=} [properties] Properties to set\n     */\n    function WebRTCTrack(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * WebRTCTrack id.\n     * @member {string} id\n     * @memberof WebRTCTrack\n     * @instance\n     */\n    WebRTCTrack.prototype.id = \"\";\n\n    /**\n     * WebRTCTrack sfu.\n     * @member {string} sfu\n     * @memberof WebRTCTrack\n     * @instance\n     */\n    WebRTCTrack.prototype.sfu = \"\";\n\n    /**\n     * Creates a new WebRTCTrack instance using the specified properties.\n     * @function create\n     * @memberof WebRTCTrack\n     * @static\n     * @param {IWebRTCTrack=} [properties] Properties to set\n     * @returns {WebRTCTrack} WebRTCTrack instance\n     */\n    WebRTCTrack.create = function create(properties) {\n        return new WebRTCTrack(properties);\n    };\n\n    /**\n     * Encodes the specified WebRTCTrack message. Does not implicitly {@link WebRTCTrack.verify|verify} messages.\n     * @function encode\n     * @memberof WebRTCTrack\n     * @static\n     * @param {IWebRTCTrack} message WebRTCTrack message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    WebRTCTrack.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.id != null && Object.hasOwnProperty.call(message, \"id\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);\n        if (message.sfu != null && Object.hasOwnProperty.call(message, \"sfu\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.sfu);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified WebRTCTrack message, length delimited. Does not implicitly {@link WebRTCTrack.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof WebRTCTrack\n     * @static\n     * @param {IWebRTCTrack} message WebRTCTrack message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    WebRTCTrack.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a WebRTCTrack message from the specified reader or buffer.\n     * @function decode\n     * @memberof WebRTCTrack\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {WebRTCTrack} WebRTCTrack\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    WebRTCTrack.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WebRTCTrack();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.id = reader.string();\n                break;\n            case 2:\n                message.sfu = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a WebRTCTrack message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof WebRTCTrack\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {WebRTCTrack} WebRTCTrack\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    WebRTCTrack.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a WebRTCTrack message.\n     * @function verify\n     * @memberof WebRTCTrack\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    WebRTCTrack.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.id != null && message.hasOwnProperty(\"id\"))\n            if (!$util.isString(message.id))\n                return \"id: string expected\";\n        if (message.sfu != null && message.hasOwnProperty(\"sfu\"))\n            if (!$util.isString(message.sfu))\n                return \"sfu: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a WebRTCTrack message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof WebRTCTrack\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {WebRTCTrack} WebRTCTrack\n     */\n    WebRTCTrack.fromObject = function fromObject(object) {\n        if (object instanceof $root.WebRTCTrack)\n            return object;\n        var message = new $root.WebRTCTrack();\n        if (object.id != null)\n            message.id = String(object.id);\n        if (object.sfu != null)\n            message.sfu = String(object.sfu);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a WebRTCTrack message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof WebRTCTrack\n     * @static\n     * @param {WebRTCTrack} message WebRTCTrack\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    WebRTCTrack.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.id = \"\";\n            object.sfu = \"\";\n        }\n        if (message.id != null && message.hasOwnProperty(\"id\"))\n            object.id = message.id;\n        if (message.sfu != null && message.hasOwnProperty(\"sfu\"))\n            object.sfu = message.sfu;\n        return object;\n    };\n\n    /**\n     * Converts this WebRTCTrack to JSON.\n     * @function toJSON\n     * @memberof WebRTCTrack\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    WebRTCTrack.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return WebRTCTrack;\n})();\n\n$root.Trophy = (function() {\n\n    /**\n     * Properties of a Trophy.\n     * @exports ITrophy\n     * @interface ITrophy\n     * @property {string|null} [trophy] Trophy trophy\n     * @property {number|null} [timestamp] Trophy timestamp\n     */\n\n    /**\n     * Constructs a new Trophy.\n     * @exports Trophy\n     * @classdesc Represents a Trophy.\n     * @implements ITrophy\n     * @constructor\n     * @param {ITrophy=} [properties] Properties to set\n     */\n    function Trophy(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Trophy trophy.\n     * @member {string} trophy\n     * @memberof Trophy\n     * @instance\n     */\n    Trophy.prototype.trophy = \"\";\n\n    /**\n     * Trophy timestamp.\n     * @member {number} timestamp\n     * @memberof Trophy\n     * @instance\n     */\n    Trophy.prototype.timestamp = 0;\n\n    /**\n     * Creates a new Trophy instance using the specified properties.\n     * @function create\n     * @memberof Trophy\n     * @static\n     * @param {ITrophy=} [properties] Properties to set\n     * @returns {Trophy} Trophy instance\n     */\n    Trophy.create = function create(properties) {\n        return new Trophy(properties);\n    };\n\n    /**\n     * Encodes the specified Trophy message. Does not implicitly {@link Trophy.verify|verify} messages.\n     * @function encode\n     * @memberof Trophy\n     * @static\n     * @param {ITrophy} message Trophy message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Trophy.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.trophy != null && Object.hasOwnProperty.call(message, \"trophy\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.trophy);\n        if (message.timestamp != null && Object.hasOwnProperty.call(message, \"timestamp\"))\n            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.timestamp);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified Trophy message, length delimited. Does not implicitly {@link Trophy.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Trophy\n     * @static\n     * @param {ITrophy} message Trophy message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Trophy.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a Trophy message from the specified reader or buffer.\n     * @function decode\n     * @memberof Trophy\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Trophy} Trophy\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Trophy.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trophy();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.trophy = reader.string();\n                break;\n            case 2:\n                message.timestamp = reader.uint32();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a Trophy message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Trophy\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Trophy} Trophy\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Trophy.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a Trophy message.\n     * @function verify\n     * @memberof Trophy\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    Trophy.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.trophy != null && message.hasOwnProperty(\"trophy\"))\n            if (!$util.isString(message.trophy))\n                return \"trophy: string expected\";\n        if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n            if (!$util.isInteger(message.timestamp))\n                return \"timestamp: integer expected\";\n        return null;\n    };\n\n    /**\n     * Creates a Trophy message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Trophy\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {Trophy} Trophy\n     */\n    Trophy.fromObject = function fromObject(object) {\n        if (object instanceof $root.Trophy)\n            return object;\n        var message = new $root.Trophy();\n        if (object.trophy != null)\n            message.trophy = String(object.trophy);\n        if (object.timestamp != null)\n            message.timestamp = object.timestamp >>> 0;\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a Trophy message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Trophy\n     * @static\n     * @param {Trophy} message Trophy\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Trophy.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.trophy = \"\";\n            object.timestamp = 0;\n        }\n        if (message.trophy != null && message.hasOwnProperty(\"trophy\"))\n            object.trophy = message.trophy;\n        if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n            object.timestamp = message.timestamp;\n        return object;\n    };\n\n    /**\n     * Converts this Trophy to JSON.\n     * @function toJSON\n     * @memberof Trophy\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Trophy.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Trophy;\n})();\n\n$root.ChatMessage = (function() {\n\n    /**\n     * Properties of a ChatMessage.\n     * @exports IChatMessage\n     * @interface IChatMessage\n     * @property {string|null} [message] ChatMessage message\n     * @property {string|null} [fromUser] ChatMessage fromUser\n     * @property {number|null} [timestamp] ChatMessage timestamp\n     */\n\n    /**\n     * Constructs a new ChatMessage.\n     * @exports ChatMessage\n     * @classdesc Represents a ChatMessage.\n     * @implements IChatMessage\n     * @constructor\n     * @param {IChatMessage=} [properties] Properties to set\n     */\n    function ChatMessage(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ChatMessage message.\n     * @member {string} message\n     * @memberof ChatMessage\n     * @instance\n     */\n    ChatMessage.prototype.message = \"\";\n\n    /**\n     * ChatMessage fromUser.\n     * @member {string} fromUser\n     * @memberof ChatMessage\n     * @instance\n     */\n    ChatMessage.prototype.fromUser = \"\";\n\n    /**\n     * ChatMessage timestamp.\n     * @member {number} timestamp\n     * @memberof ChatMessage\n     * @instance\n     */\n    ChatMessage.prototype.timestamp = 0;\n\n    /**\n     * Creates a new ChatMessage instance using the specified properties.\n     * @function create\n     * @memberof ChatMessage\n     * @static\n     * @param {IChatMessage=} [properties] Properties to set\n     * @returns {ChatMessage} ChatMessage instance\n     */\n    ChatMessage.create = function create(properties) {\n        return new ChatMessage(properties);\n    };\n\n    /**\n     * Encodes the specified ChatMessage message. Does not implicitly {@link ChatMessage.verify|verify} messages.\n     * @function encode\n     * @memberof ChatMessage\n     * @static\n     * @param {IChatMessage} message ChatMessage message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ChatMessage.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.message != null && Object.hasOwnProperty.call(message, \"message\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.message);\n        if (message.fromUser != null && Object.hasOwnProperty.call(message, \"fromUser\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.fromUser);\n        if (message.timestamp != null && Object.hasOwnProperty.call(message, \"timestamp\"))\n            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.timestamp);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ChatMessage message, length delimited. Does not implicitly {@link ChatMessage.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ChatMessage\n     * @static\n     * @param {IChatMessage} message ChatMessage message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ChatMessage.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ChatMessage message from the specified reader or buffer.\n     * @function decode\n     * @memberof ChatMessage\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ChatMessage} ChatMessage\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ChatMessage.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ChatMessage();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.message = reader.string();\n                break;\n            case 2:\n                message.fromUser = reader.string();\n                break;\n            case 3:\n                message.timestamp = reader.uint32();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ChatMessage message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ChatMessage\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ChatMessage} ChatMessage\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ChatMessage.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ChatMessage message.\n     * @function verify\n     * @memberof ChatMessage\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ChatMessage.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.message != null && message.hasOwnProperty(\"message\"))\n            if (!$util.isString(message.message))\n                return \"message: string expected\";\n        if (message.fromUser != null && message.hasOwnProperty(\"fromUser\"))\n            if (!$util.isString(message.fromUser))\n                return \"fromUser: string expected\";\n        if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n            if (!$util.isInteger(message.timestamp))\n                return \"timestamp: integer expected\";\n        return null;\n    };\n\n    /**\n     * Creates a ChatMessage message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ChatMessage\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ChatMessage} ChatMessage\n     */\n    ChatMessage.fromObject = function fromObject(object) {\n        if (object instanceof $root.ChatMessage)\n            return object;\n        var message = new $root.ChatMessage();\n        if (object.message != null)\n            message.message = String(object.message);\n        if (object.fromUser != null)\n            message.fromUser = String(object.fromUser);\n        if (object.timestamp != null)\n            message.timestamp = object.timestamp >>> 0;\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a ChatMessage message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ChatMessage\n     * @static\n     * @param {ChatMessage} message ChatMessage\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ChatMessage.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.message = \"\";\n            object.fromUser = \"\";\n            object.timestamp = 0;\n        }\n        if (message.message != null && message.hasOwnProperty(\"message\"))\n            object.message = message.message;\n        if (message.fromUser != null && message.hasOwnProperty(\"fromUser\"))\n            object.fromUser = message.fromUser;\n        if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n            object.timestamp = message.timestamp;\n        return object;\n    };\n\n    /**\n     * Converts this ChatMessage to JSON.\n     * @function toJSON\n     * @memberof ChatMessage\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ChatMessage.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ChatMessage;\n})();\n\n/**\n * ContentType enum.\n * @exports ContentType\n * @enum {number}\n * @property {number} Blank=0 Blank value\n * @property {number} WebRtcStream=1 WebRtcStream value\n * @property {number} ActivityStream=2 ActivityStream value\n * @property {number} H5P=3 H5P value\n * @property {number} Image=4 Image value\n * @property {number} Video=5 Video value\n * @property {number} Audio=6 Audio value\n */\n$root.ContentType = (function() {\n    var valuesById = {}, values = Object.create(valuesById);\n    values[valuesById[0] = \"Blank\"] = 0;\n    values[valuesById[1] = \"WebRtcStream\"] = 1;\n    values[valuesById[2] = \"ActivityStream\"] = 2;\n    values[valuesById[3] = \"H5P\"] = 3;\n    values[valuesById[4] = \"Image\"] = 4;\n    values[valuesById[5] = \"Video\"] = 5;\n    values[valuesById[6] = \"Audio\"] = 6;\n    return values;\n})();\n\n$root.Content = (function() {\n\n    /**\n     * Properties of a Content.\n     * @exports IContent\n     * @interface IContent\n     * @property {ContentType|null} [type] Content type\n     * @property {string|null} [id] Content id\n     * @property {string|null} [url] Content url\n     */\n\n    /**\n     * Constructs a new Content.\n     * @exports Content\n     * @classdesc Represents a Content.\n     * @implements IContent\n     * @constructor\n     * @param {IContent=} [properties] Properties to set\n     */\n    function Content(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Content type.\n     * @member {ContentType} type\n     * @memberof Content\n     * @instance\n     */\n    Content.prototype.type = 0;\n\n    /**\n     * Content id.\n     * @member {string} id\n     * @memberof Content\n     * @instance\n     */\n    Content.prototype.id = \"\";\n\n    /**\n     * Content url.\n     * @member {string} url\n     * @memberof Content\n     * @instance\n     */\n    Content.prototype.url = \"\";\n\n    /**\n     * Creates a new Content instance using the specified properties.\n     * @function create\n     * @memberof Content\n     * @static\n     * @param {IContent=} [properties] Properties to set\n     * @returns {Content} Content instance\n     */\n    Content.create = function create(properties) {\n        return new Content(properties);\n    };\n\n    /**\n     * Encodes the specified Content message. Does not implicitly {@link Content.verify|verify} messages.\n     * @function encode\n     * @memberof Content\n     * @static\n     * @param {IContent} message Content message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Content.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.type != null && Object.hasOwnProperty.call(message, \"type\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);\n        if (message.id != null && Object.hasOwnProperty.call(message, \"id\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.id);\n        if (message.url != null && Object.hasOwnProperty.call(message, \"url\"))\n            writer.uint32(/* id 3, wireType 2 =*/26).string(message.url);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified Content message, length delimited. Does not implicitly {@link Content.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Content\n     * @static\n     * @param {IContent} message Content message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Content.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a Content message from the specified reader or buffer.\n     * @function decode\n     * @memberof Content\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Content} Content\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Content.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Content();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.type = reader.int32();\n                break;\n            case 2:\n                message.id = reader.string();\n                break;\n            case 3:\n                message.url = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a Content message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Content\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Content} Content\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Content.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a Content message.\n     * @function verify\n     * @memberof Content\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    Content.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.type != null && message.hasOwnProperty(\"type\"))\n            switch (message.type) {\n            default:\n                return \"type: enum value expected\";\n            case 0:\n            case 1:\n            case 2:\n            case 3:\n            case 4:\n            case 5:\n            case 6:\n                break;\n            }\n        if (message.id != null && message.hasOwnProperty(\"id\"))\n            if (!$util.isString(message.id))\n                return \"id: string expected\";\n        if (message.url != null && message.hasOwnProperty(\"url\"))\n            if (!$util.isString(message.url))\n                return \"url: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a Content message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Content\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {Content} Content\n     */\n    Content.fromObject = function fromObject(object) {\n        if (object instanceof $root.Content)\n            return object;\n        var message = new $root.Content();\n        switch (object.type) {\n        case \"Blank\":\n        case 0:\n            message.type = 0;\n            break;\n        case \"WebRtcStream\":\n        case 1:\n            message.type = 1;\n            break;\n        case \"ActivityStream\":\n        case 2:\n            message.type = 2;\n            break;\n        case \"H5P\":\n        case 3:\n            message.type = 3;\n            break;\n        case \"Image\":\n        case 4:\n            message.type = 4;\n            break;\n        case \"Video\":\n        case 5:\n            message.type = 5;\n            break;\n        case \"Audio\":\n        case 6:\n            message.type = 6;\n            break;\n        }\n        if (object.id != null)\n            message.id = String(object.id);\n        if (object.url != null)\n            message.url = String(object.url);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a Content message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Content\n     * @static\n     * @param {Content} message Content\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Content.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.type = options.enums === String ? \"Blank\" : 0;\n            object.id = \"\";\n            object.url = \"\";\n        }\n        if (message.type != null && message.hasOwnProperty(\"type\"))\n            object.type = options.enums === String ? $root.ContentType[message.type] : message.type;\n        if (message.id != null && message.hasOwnProperty(\"id\"))\n            object.id = message.id;\n        if (message.url != null && message.hasOwnProperty(\"url\"))\n            object.url = message.url;\n        return object;\n    };\n\n    /**\n     * Converts this Content to JSON.\n     * @function toJSON\n     * @memberof Content\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Content.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Content;\n})();\n\nmodule.exports = $root;\n"],"names":["aspromise","asPromise","fn","ctx","params","Array","arguments","length","offset","index","pending","Promise","resolve","reject","err","apply","base64","string","p","n","charAt","Math","ceil","b64","s64","i","encode","buffer","start","end","t","parts","chunk","j","b","push","String","fromCharCode","slice","join","invalidEncoding","decode","c","charCodeAt","undefined","Error","test","eventemitter","EventEmitter","this","_listeners","prototype","on","evt","off","listeners","splice","emit","args","float","factory","exports","Float32Array","f32","f8b","Uint8Array","le","writeFloat_f32_cpy","val","buf","pos","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","writeFloatLE","writeFloatBE","readFloatLE","readFloatBE","writeFloat_ieee754","writeUint","sign","isNaN","round","exponent","floor","log","LN2","pow","readFloat_ieee754","readUint","uint","mantissa","NaN","Infinity","bind","writeUintLE","writeUintBE","readUintLE","readUintBE","Float64Array","f64","writeDouble_f64_cpy","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDoubleLE","writeDoubleBE","readDoubleLE","readDoubleBE","writeDouble_ieee754","off0","off1","readDouble_ieee754","lo","hi","inquire_1","inquire","moduleName","mod","eval","replace","Object","keys","e","utf8","len","read","write","c1","c2","pool_1","pool","alloc","size","SIZE","MAX","slab","call","longbits","LongBits","util","require$$0","zero","toNumber","zzEncode","zzDecode","zeroHash","fromNumber","value","from","isString","Long","parseInt","fromString","low","high","unsigned","toLong","Boolean","fromHash","hash","toHash","mask","part0","part1","part2","merge","dst","src","ifNotSet","newError","name","CustomError","message","properties","defineProperty","get","captureStackTrace","stack","create","constructor","toString","require$$1","require$$2","require$$3","require$$4","require$$5","require$$6","require$$7","global","window","self","emptyArray","freeze","emptyObject","isNode","process","versions","node","isInteger","Number","isFinite","isObject","isset","isSet","obj","prop","hasOwnProperty","isArray","Buffer","utf8Write","_Buffer_from","_Buffer_allocUnsafe","newBuffer","sizeOrArray","dcodeIO","key2Re","key32Re","key64Re","longToHash","longFromHash","bits","fromBits","lcFirst","str","toLowerCase","substring","ProtocolError","oneOfGetter","fieldNames","fieldMap","oneOfSetter","toJSONOptions","longs","enums","bytes","json","_configure","encoding","allocUnsafe","writer","Writer","BufferWriter","Op","next","noop","State","head","tail","states","writeByte","writeVarint32","VarintOp","writeVarint64","writeFixed32","subarray","_push","uint32","int32","sint32","uint64","int64","sint64","bool","fixed32","sfixed32","fixed64","sfixed64","double","writeBytes","set","fork","reset","ldelim","finish","BufferWriter_","writer_buffer","writeStringBuffer","writeBytesBuffer","copy","byteLength","reader","Reader","BufferReader","indexOutOfRange","writeLength","RangeError","create_array","isBuffer","readLongVarint","readFixed32_end","readFixed64","_slice","skip","skipType","wireType","BufferReader_","reader_buffer","utf8Slice","min","service","Service","rpcImpl","requestDelimited","responseDelimited","TypeError","rpcCall","method","requestCtor","responseCtor","request","callback","response","setTimeout","endedByRPC","roots","protobuf","configure","build","rpc","minimal","$protobuf","$Reader","$Writer","$util","$root","valuesById","values","Action","$oneOfFields","id","setDevice","removeDevice","setWebRtcStream","setActivity","setHost","addTrophy","setContent","sendChatMessage","userJoin","userLeave","endClass","heartbeat","Heartbeat","SetDevice","RemoveDevice","SetWebRTCStream","SetActivity","SetHost","AddTrophy","SetContent","SendChatMessage","UserJoin","UserLeave","EndClass","encodeDelimited","tag","decodeDelimited","verify","action","error","fromObject","object","toObject","options","defaults","oneofs","toJSON","ActionAcknowledgement","code","deviceId","device","Device","streams","WebRTCStream","arrays","activity","Activity","trophyId","timestamp","userId","fromValue","long","content","Content","StateChanges","changes","StateDiff","setState","addParticipants","removeParticipants","changeContent","changeHost","appendChatMessage","receiveTrophy","classEnded","AddParticipants","RemoveParticipants","ChangeContent","ChangeHost","AppendChatMessage","ReceiveTrophy","ClassEnded","Participant","devices","trophies","Trophy","key","keys2","objects","participants","chatMessages","roomId","host","endTimestamp","ChatMessage","hostId","messages","trophy","webRTCStreams","streamId","tracks","label","WebRTCTrack","sfu","fromUser","ContentType","type","url","dist"],"mappings":"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"}